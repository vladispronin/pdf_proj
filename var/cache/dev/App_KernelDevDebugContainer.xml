<?xml version="1.0" encoding="utf-8"?>
<container xmlns="http://symfony.com/schema/dic/services" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd">
  <parameters>
    <parameter key="kernel.project_dir">/var/www</parameter>
    <parameter key="kernel.environment">dev</parameter>
    <parameter key="kernel.runtime_environment">%env(default:kernel.environment:APP_RUNTIME_ENV)%</parameter>
    <parameter key="kernel.runtime_mode">%env(query_string:default:container.runtime_mode:APP_RUNTIME_MODE)%</parameter>
    <parameter key="kernel.runtime_mode.web">%env(bool:default::key:web:default:kernel.runtime_mode:)%</parameter>
    <parameter key="kernel.runtime_mode.cli">%env(not:default:kernel.runtime_mode.web:)%</parameter>
    <parameter key="kernel.runtime_mode.worker">%env(bool:default::key:worker:default:kernel.runtime_mode:)%</parameter>
    <parameter key="kernel.debug">true</parameter>
    <parameter key="kernel.build_dir">/var/www/var/cache/dev</parameter>
    <parameter key="kernel.cache_dir">/var/www/var/cache/dev</parameter>
    <parameter key="kernel.logs_dir">/var/www/var/log</parameter>
    <parameter key="kernel.bundles" type="collection">
      <parameter key="FrameworkBundle">Symfony\Bundle\FrameworkBundle\FrameworkBundle</parameter>
      <parameter key="MakerBundle">Symfony\Bundle\MakerBundle\MakerBundle</parameter>
      <parameter key="AwsBundle">Aws\Symfony\AwsBundle</parameter>
    </parameter>
    <parameter key="kernel.bundles_metadata" type="collection">
      <parameter key="FrameworkBundle" type="collection">
        <parameter key="path">/var/www/vendor/symfony/framework-bundle</parameter>
        <parameter key="namespace">Symfony\Bundle\FrameworkBundle</parameter>
      </parameter>
      <parameter key="MakerBundle" type="collection">
        <parameter key="path">/var/www/vendor/symfony/maker-bundle/src</parameter>
        <parameter key="namespace">Symfony\Bundle\MakerBundle</parameter>
      </parameter>
      <parameter key="AwsBundle" type="collection">
        <parameter key="path">/var/www/vendor/aws/aws-sdk-php-symfony/src</parameter>
        <parameter key="namespace">Aws\Symfony</parameter>
      </parameter>
    </parameter>
    <parameter key="kernel.charset">UTF-8</parameter>
    <parameter key="kernel.container_class">App_KernelDevDebugContainer</parameter>
    <parameter key="event_dispatcher.event_aliases" type="collection">
      <parameter key="Symfony\Component\Console\Event\ConsoleCommandEvent">console.command</parameter>
      <parameter key="Symfony\Component\Console\Event\ConsoleErrorEvent">console.error</parameter>
      <parameter key="Symfony\Component\Console\Event\ConsoleSignalEvent">console.signal</parameter>
      <parameter key="Symfony\Component\Console\Event\ConsoleTerminateEvent">console.terminate</parameter>
      <parameter key="Symfony\Component\Form\Event\PreSubmitEvent">form.pre_submit</parameter>
      <parameter key="Symfony\Component\Form\Event\SubmitEvent">form.submit</parameter>
      <parameter key="Symfony\Component\Form\Event\PostSubmitEvent">form.post_submit</parameter>
      <parameter key="Symfony\Component\Form\Event\PreSetDataEvent">form.pre_set_data</parameter>
      <parameter key="Symfony\Component\Form\Event\PostSetDataEvent">form.post_set_data</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ControllerArgumentsEvent">kernel.controller_arguments</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ControllerEvent">kernel.controller</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ResponseEvent">kernel.response</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\FinishRequestEvent">kernel.finish_request</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\RequestEvent">kernel.request</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ViewEvent">kernel.view</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ExceptionEvent">kernel.exception</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\TerminateEvent">kernel.terminate</parameter>
    </parameter>
    <parameter key="fragment.renderer.hinclude.global_template">null</parameter>
    <parameter key="fragment.path">/_fragment</parameter>
    <parameter key="kernel.secret">%env(APP_SECRET)%</parameter>
    <parameter key="kernel.http_method_override">false</parameter>
    <parameter key="kernel.trust_x_sendfile_type_header">false</parameter>
    <parameter key="kernel.trusted_hosts" type="collection"/>
    <parameter key="kernel.default_locale">en</parameter>
    <parameter key="kernel.enabled_locales" type="collection"/>
    <parameter key="kernel.error_controller">error_controller</parameter>
    <parameter key="debug.file_link_format">%env(default::SYMFONY_IDE)%</parameter>
    <parameter key="debug.error_handler.throw_at">-1</parameter>
    <parameter key="debug.container.dump">/var/www/var/cache/dev/App_KernelDevDebugContainer.xml</parameter>
    <parameter key="router.request_context.host">localhost</parameter>
    <parameter key="router.request_context.scheme">http</parameter>
    <parameter key="router.request_context.base_url"></parameter>
    <parameter key="router.resource">kernel::loadRoutes</parameter>
    <parameter key="router.cache_dir">/var/www/var/cache/dev</parameter>
    <parameter key="request_listener.http_port">80</parameter>
    <parameter key="request_listener.https_port">443</parameter>
    <parameter key="cache.prefix.seed">_/var/www.App_KernelDevDebugContainer</parameter>
    <parameter key="session.metadata.storage_key">_sf2_meta</parameter>
    <parameter key="session.storage.options" type="collection">
      <parameter key="cache_limiter" type="string">0</parameter>
      <parameter key="cookie_secure">auto</parameter>
      <parameter key="cookie_httponly">true</parameter>
      <parameter key="cookie_samesite">lax</parameter>
      <parameter key="gc_probability">1</parameter>
    </parameter>
    <parameter key="session.save_path">null</parameter>
    <parameter key="session.metadata.update_threshold">0</parameter>
    <parameter key="form.type_extension.csrf.enabled">false</parameter>
    <parameter key="validator.translation_domain">validators</parameter>
    <parameter key="data_collector.templates" type="collection"/>
    <parameter key="aws_sdk.class">Aws\Sdk</parameter>
    <parameter key="console.command.ids" type="collection"/>
  </parameters>
  <services>
    <service id="service_container" class="Symfony\Component\DependencyInjection\ContainerInterface" public="true" synthetic="true"/>
    <service id="kernel" class="App\Kernel" public="true" synthetic="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="routing.route_loader"/>
    </service>
    <service id="App\Controller\PdfController" class="App\Controller\PdfController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.O2p6Lk7.App\Controller\PdfController"/>
      </call>
    </service>
    <service id="controller_resolver" class="Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver">
      <tag name="monolog.logger" channel="request"/>
      <argument type="service" id="service_container"/>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <call method="allowControllers">
        <argument type="collection">
          <argument>Symfony\Bundle\FrameworkBundle\Controller\AbstractController</argument>
          <argument>Symfony\Bundle\FrameworkBundle\Controller\TemplateController</argument>
        </argument>
      </call>
      <call method="allowControllers">
        <argument type="collection">
          <argument>App\Kernel</argument>
          <argument>App\Controller\PdfController</argument>
        </argument>
      </call>
    </service>
    <service id="argument_metadata_factory" class="Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory"/>
    <service id="argument_resolver" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver">
      <argument type="service" id="argument_metadata_factory"/>
      <argument type="iterator">
        <argument type="service" id="argument_resolver.backed_enum_resolver"/>
        <argument type="service" id="argument_resolver.datetime"/>
        <argument type="service" id="argument_resolver.request_attribute"/>
        <argument type="service" id="argument_resolver.request"/>
        <argument type="service" id="argument_resolver.session"/>
        <argument type="service" id="argument_resolver.service"/>
        <argument type="service" id="argument_resolver.default"/>
        <argument type="service" id="argument_resolver.variadic"/>
      </argument>
      <argument type="service" id=".service_locator.3FMSrrH"/>
    </service>
    <service id="argument_resolver.backed_enum_resolver" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\BackedEnumValueResolver">
      <tag priority="100" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\BackedEnumValueResolver">controller.argument_value_resolver</tag>
    </service>
    <service id="argument_resolver.datetime" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DateTimeValueResolver">
      <tag priority="100" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DateTimeValueResolver">controller.argument_value_resolver</tag>
      <argument>null</argument>
    </service>
    <service id="argument_resolver.request_payload" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestPayloadValueResolver" lazy="true">
      <tag name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestPayloadValueResolver">controller.targeted_value_resolver</tag>
      <tag name="container.error" message="You can neither use &quot;#[MapRequestPayload]&quot; nor &quot;#[MapQueryString]&quot; since the Serializer component is not installed. Try running &quot;composer require symfony/serializer-pack&quot;."/>
    </service>
    <service id="argument_resolver.request_attribute" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver">
      <tag priority="100" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver">controller.argument_value_resolver</tag>
    </service>
    <service id="argument_resolver.request" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver">
      <tag priority="50" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver">controller.argument_value_resolver</tag>
    </service>
    <service id="argument_resolver.session" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver">
      <tag priority="50" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver">controller.argument_value_resolver</tag>
    </service>
    <service id="argument_resolver.service" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\ServiceValueResolver">
      <tag priority="-50" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\ServiceValueResolver">controller.argument_value_resolver</tag>
      <argument type="service" id=".service_locator.HBdvAhp"/>
    </service>
    <service id="argument_resolver.default" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver">
      <tag priority="-100" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver">controller.argument_value_resolver</tag>
    </service>
    <service id="argument_resolver.variadic" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver">
      <tag priority="-150" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver">controller.argument_value_resolver</tag>
    </service>
    <service id="argument_resolver.query_parameter_value_resolver" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\QueryParameterValueResolver">
      <tag name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\QueryParameterValueResolver">controller.targeted_value_resolver</tag>
    </service>
    <service id="response_listener" class="Symfony\Component\HttpKernel\EventListener\ResponseListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument>UTF-8</argument>
      <argument>false</argument>
    </service>
    <service id="locale_listener" class="Symfony\Component\HttpKernel\EventListener\LocaleListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="request_stack"/>
      <argument>en</argument>
      <argument type="service" id="router.default" on-invalid="ignore"/>
      <argument>false</argument>
      <argument type="collection"/>
    </service>
    <service id="validate_request_listener" class="Symfony\Component\HttpKernel\EventListener\ValidateRequestListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="disallow_search_engine_index_response_listener" class="Symfony\Component\HttpKernel\EventListener\DisallowRobotsIndexingListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="error_controller" class="Symfony\Component\HttpKernel\Controller\ErrorController" public="true">
      <argument type="service" id="http_kernel"/>
      <argument>error_controller</argument>
      <argument type="service" id="error_handler.error_renderer.html"/>
    </service>
    <service id="exception_listener" class="Symfony\Component\HttpKernel\EventListener\ErrorListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="request"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument>error_controller</argument>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument>true</argument>
      <argument type="collection"/>
    </service>
    <service id="controller.cache_attribute_listener" class="Symfony\Component\HttpKernel\EventListener\CacheAttributeListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="parameter_bag" class="Symfony\Component\DependencyInjection\ParameterBag\ContainerBag">
      <argument type="service" id="service_container"/>
    </service>
    <service id="event_dispatcher" class="Symfony\Component\EventDispatcher\EventDispatcher" public="true">
      <tag name="container.hot_path"/>
      <tag name="event_dispatcher">event_dispatcher.dispatcher</tag>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="response_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="locale_listener"/>
          <argument>setDefaultLocale</argument>
        </argument>
        <argument>100</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="locale_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>16</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service_closure" id="locale_listener"/>
          <argument>onKernelFinishRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="validate_request_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>256</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="disallow_search_engine_index_response_listener"/>
          <argument>onResponse</argument>
        </argument>
        <argument>-255</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller_arguments</argument>
        <argument type="collection">
          <argument type="service_closure" id="exception_listener"/>
          <argument>onControllerArguments</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service_closure" id="exception_listener"/>
          <argument>logKernelException</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service_closure" id="exception_listener"/>
          <argument>onKernelException</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="exception_listener"/>
          <argument>removeCspHeader</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller_arguments</argument>
        <argument type="collection">
          <argument type="service_closure" id="controller.cache_attribute_listener"/>
          <argument>onKernelControllerArguments</argument>
        </argument>
        <argument>10</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="controller.cache_attribute_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>-10</argument>
      </call>
      <call method="addListener">
        <argument>console.error</argument>
        <argument type="collection">
          <argument type="service_closure" id="console.error_listener"/>
          <argument>onConsoleError</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>console.terminate</argument>
        <argument type="collection">
          <argument type="service_closure" id="console.error_listener"/>
          <argument>onConsoleTerminate</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>console.error</argument>
        <argument type="collection">
          <argument type="service_closure" id="console.suggest_missing_package_subscriber"/>
          <argument>onConsoleError</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="debug.debug_handlers_listener"/>
          <argument>configure</argument>
        </argument>
        <argument>2048</argument>
      </call>
      <call method="addListener">
        <argument>console.command</argument>
        <argument type="collection">
          <argument type="service_closure" id="debug.debug_handlers_listener"/>
          <argument>configure</argument>
        </argument>
        <argument>2048</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="router_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>32</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service_closure" id="router_listener"/>
          <argument>onKernelFinishRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service_closure" id="router_listener"/>
          <argument>onKernelException</argument>
        </argument>
        <argument>-64</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="session_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>128</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="session_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>-1000</argument>
      </call>
      <call method="addListener">
        <argument>console.error</argument>
        <argument type="collection">
          <argument type="service_closure" id="maker.console_error_listener"/>
          <argument>onConsoleError</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>console.terminate</argument>
        <argument type="collection">
          <argument type="service_closure" id="maker.console_error_listener"/>
          <argument>onConsoleTerminate</argument>
        </argument>
        <argument>0</argument>
      </call>
    </service>
    <service id="http_kernel" class="Symfony\Component\HttpKernel\HttpKernel" public="true">
      <tag name="container.hot_path"/>
      <tag name="container.preload" class="Symfony\Component\Runtime\Runner\Symfony\HttpKernelRunner"/>
      <tag name="container.preload" class="Symfony\Component\Runtime\Runner\Symfony\ResponseRunner"/>
      <tag name="container.preload" class="Symfony\Component\Runtime\SymfonyRuntime"/>
      <argument type="service" id="event_dispatcher"/>
      <argument type="service" id="controller_resolver"/>
      <argument type="service" id="request_stack"/>
      <argument type="service" id="argument_resolver"/>
      <argument>true</argument>
    </service>
    <service id="request_stack" class="Symfony\Component\HttpFoundation\RequestStack" public="true"/>
    <service id="http_cache" class="Symfony\Bundle\FrameworkBundle\HttpCache\HttpCache">
      <tag name="container.hot_path"/>
      <argument type="service" id="kernel"/>
      <argument type="service" id="http_cache.store"/>
      <argument>null</argument>
      <argument type="collection">
        <argument key="debug">true</argument>
      </argument>
    </service>
    <service id="http_cache.store" class="Symfony\Component\HttpKernel\HttpCache\Store">
      <argument>/var/www/var/cache/dev/http_cache</argument>
    </service>
    <service id="url_helper" class="Symfony\Component\HttpFoundation\UrlHelper">
      <argument type="service" id="request_stack"/>
      <argument type="service" id="router.default" on-invalid="ignore"/>
    </service>
    <service id="cache_warmer" class="Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate" public="true">
      <tag name="container.no_preload"/>
      <argument type="tagged_iterator" tag="kernel.cache_warmer"/>
      <argument>true</argument>
      <argument>/var/www/var/cache/dev/App_KernelDevDebugContainerDeprecations.log</argument>
    </service>
    <service id="cache_clearer" class="Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer">
      <argument type="tagged_iterator" tag="kernel.cache_clearer"/>
    </service>
    <service id="filesystem" class="Symfony\Component\Filesystem\Filesystem"/>
    <service id="file_locator" class="Symfony\Component\HttpKernel\Config\FileLocator">
      <argument type="service" id="kernel"/>
    </service>
    <service id="uri_signer" class="Symfony\Component\HttpFoundation\UriSigner">
      <argument>%env(APP_SECRET)%</argument>
    </service>
    <service id="config_cache_factory" class="Symfony\Component\Config\ResourceCheckerConfigCacheFactory">
      <argument type="tagged_iterator" tag="config_cache.resource_checker"/>
    </service>
    <service id="dependency_injection.config.container_parameters_resource_checker" class="Symfony\Component\DependencyInjection\Config\ContainerParametersResourceChecker">
      <tag name="config_cache.resource_checker" priority="-980"/>
      <argument type="service" id="service_container"/>
    </service>
    <service id="config.resource.self_checking_resource_checker" class="Symfony\Component\Config\Resource\SelfCheckingResourceChecker">
      <tag name="config_cache.resource_checker" priority="-990"/>
    </service>
    <service id="services_resetter" class="Symfony\Component\HttpKernel\DependencyInjection\ServicesResetter" public="true">
      <argument type="iterator">
        <argument key="cache.app" type="service" id="cache.app" on-invalid="ignore_uninitialized"/>
        <argument key="cache.system" type="service" id="cache.system" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator" type="service" id="cache.validator" on-invalid="ignore_uninitialized"/>
        <argument key="cache.serializer" type="service" id="cache.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="cache.annotations" type="service" id="cache.annotations" on-invalid="ignore_uninitialized"/>
        <argument key="cache.property_info" type="service" id="cache.property_info" on-invalid="ignore_uninitialized"/>
        <argument key="session_listener" type="service" id="session_listener" on-invalid="ignore_uninitialized"/>
        <argument key="form.choice_list_factory.cached" type="service" id="form.choice_list_factory.cached" on-invalid="ignore_uninitialized"/>
      </argument>
      <argument type="collection">
        <argument key="cache.app" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.system" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.validator" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.serializer" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.annotations" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.property_info" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="session_listener" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="form.choice_list_factory.cached" type="collection">
          <argument>reset</argument>
        </argument>
      </argument>
    </service>
    <service id="reverse_container" class="Symfony\Component\DependencyInjection\ReverseContainer">
      <argument type="service" id="service_container"/>
      <argument type="service" id=".service_locator.XXv1IfR"/>
    </service>
    <service id="container.env_var_processor" class="Symfony\Component\DependencyInjection\EnvVarProcessor">
      <tag name="container.env_var_processor"/>
      <argument type="service" id="service_container"/>
      <argument type="tagged_iterator" tag="container.env_var_loader"/>
    </service>
    <service id="slugger" class="Symfony\Component\String\Slugger\SluggerInterface">
      <tag name="container.error" message="You cannot use the &quot;slugger&quot; service since the Translation contracts are not installed. Try running &quot;composer require symfony/translation&quot;."/>
    </service>
    <service id="container.getenv" class="Closure">
      <tag name="routing.expression_language_function" function="env"/>
      <argument type="collection">
        <argument type="service" id="service_container"/>
        <argument>getEnv</argument>
      </argument>
      <factory class="Closure" method="fromCallable"/>
    </service>
    <service id="container.get_routing_condition_service" class="Closure" public="true">
      <tag name="routing.expression_language_function" function="service"/>
      <argument type="collection">
        <argument type="service" id=".service_locator.Xbsa8iG"/>
        <argument>get</argument>
      </argument>
      <factory class="Closure" method="fromCallable"/>
    </service>
    <service id="container.env" class="Symfony\Component\String\LazyString" constructor="fromCallable" abstract="true">
      <argument type="service" id="container.getenv"/>
    </service>
    <service id="config_builder.warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\ConfigBuilderCacheWarmer">
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id="kernel"/>
      <argument type="service" id="logger" on-invalid="null"/>
    </service>
    <service id="Symfony\Component\Config\Loader\LoaderInterface" class="Symfony\Component\Config\Loader\LoaderInterface" abstract="true">
      <tag name="container.excluded"/>
    </service>
    <service id="Symfony\Component\HttpFoundation\Request" class="Symfony\Component\HttpFoundation\Request" abstract="true">
      <tag name="container.excluded"/>
    </service>
    <service id="Symfony\Component\HttpFoundation\Response" class="Symfony\Component\HttpFoundation\Response" abstract="true">
      <tag name="container.excluded"/>
    </service>
    <service id="Symfony\Component\HttpFoundation\Session\SessionInterface" class="Symfony\Component\HttpFoundation\Session\SessionInterface" abstract="true">
      <tag name="container.excluded"/>
    </service>
    <service id="fragment.handler" class="Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler">
      <argument type="service" id=".service_locator.lLv4pWF"/>
      <argument type="service" id="request_stack"/>
      <argument>true</argument>
    </service>
    <service id="fragment.uri_generator" class="Symfony\Component\HttpKernel\Fragment\FragmentUriGenerator">
      <argument>/_fragment</argument>
      <argument type="service" id="uri_signer"/>
      <argument type="service" id="request_stack"/>
    </service>
    <service id="fragment.renderer.inline" class="Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer">
      <tag name="kernel.fragment_renderer" alias="inline"/>
      <argument type="service" id="http_kernel"/>
      <argument type="service" id="event_dispatcher"/>
      <call method="setFragmentPath">
        <argument>/_fragment</argument>
      </call>
    </service>
    <service id="error_handler.error_renderer.html" class="Symfony\Component\ErrorHandler\ErrorRenderer\HtmlErrorRenderer">
      <argument type="service">
        <service>
          <argument type="service" id="request_stack"/>
          <argument>true</argument>
          <factory class="Symfony\Component\ErrorHandler\ErrorRenderer\HtmlErrorRenderer" method="isDebug"/>
        </service>
      </argument>
      <argument>UTF-8</argument>
      <argument type="service" id="debug.file_link_formatter" on-invalid="null"/>
      <argument>/var/www</argument>
      <argument type="service">
        <service>
          <argument type="service" id="request_stack"/>
          <factory class="Symfony\Component\ErrorHandler\ErrorRenderer\HtmlErrorRenderer" method="getAndCleanOutputBuffer"/>
        </service>
      </argument>
      <argument type="service" id="logger" on-invalid="null"/>
    </service>
    <service id="process.messenger.process_message_handler" class="Symfony\Component\Process\Messenger\RunProcessMessageHandler">
      <tag name="messenger.message_handler"/>
    </service>
    <service id="console.error_listener" class="Symfony\Component\Console\EventListener\ErrorListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="console"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="logger" on-invalid="null"/>
    </service>
    <service id="console.suggest_missing_package_subscriber" class="Symfony\Bundle\FrameworkBundle\EventListener\SuggestMissingPackageSubscriber">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.no_preload"/>
    </service>
    <service id="console.command.about" class="Symfony\Bundle\FrameworkBundle\Command\AboutCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>about</argument>
      </call>
      <call method="setDescription">
        <argument>Display information about the current project</argument>
      </call>
    </service>
    <service id="console.command.assets_install" class="Symfony\Bundle\FrameworkBundle\Command\AssetsInstallCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="filesystem"/>
      <argument>/var/www</argument>
      <call method="setName">
        <argument>assets:install</argument>
      </call>
      <call method="setDescription">
        <argument>Install bundle's web assets under a public directory</argument>
      </call>
    </service>
    <service id="console.command.cache_clear" class="Symfony\Bundle\FrameworkBundle\Command\CacheClearCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="cache_clearer"/>
      <argument type="service" id="filesystem"/>
      <call method="setName">
        <argument>cache:clear</argument>
      </call>
      <call method="setDescription">
        <argument>Clear the cache</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_clear" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolClearCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="cache.global_clearer"/>
      <argument type="collection">
        <argument>cache.app</argument>
        <argument>cache.system</argument>
        <argument>cache.validator</argument>
        <argument>cache.serializer</argument>
        <argument>cache.annotations</argument>
        <argument>cache.property_info</argument>
      </argument>
      <call method="setName">
        <argument>cache:pool:clear</argument>
      </call>
      <call method="setDescription">
        <argument>Clear cache pools</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_prune" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolPruneCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="collection"/>
      <call method="setName">
        <argument>cache:pool:prune</argument>
      </call>
      <call method="setDescription">
        <argument>Prune cache pools</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_invalidate_tags" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolInvalidateTagsCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id=".service_locator.NBUFN6A"/>
      <call method="setName">
        <argument>cache:pool:invalidate-tags</argument>
      </call>
      <call method="setDescription">
        <argument>Invalidate cache tags for all or a specific pool</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_delete" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolDeleteCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="cache.global_clearer"/>
      <argument type="collection">
        <argument>cache.app</argument>
        <argument>cache.system</argument>
        <argument>cache.validator</argument>
        <argument>cache.serializer</argument>
        <argument>cache.annotations</argument>
        <argument>cache.property_info</argument>
      </argument>
      <call method="setName">
        <argument>cache:pool:delete</argument>
      </call>
      <call method="setDescription">
        <argument>Delete an item from a cache pool</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_list" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolListCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="collection">
        <argument>cache.app</argument>
        <argument>cache.system</argument>
        <argument>cache.validator</argument>
        <argument>cache.serializer</argument>
        <argument>cache.annotations</argument>
        <argument>cache.property_info</argument>
      </argument>
      <call method="setName">
        <argument>cache:pool:list</argument>
      </call>
      <call method="setDescription">
        <argument>List available cache pools</argument>
      </call>
    </service>
    <service id="console.command.cache_warmup" class="Symfony\Bundle\FrameworkBundle\Command\CacheWarmupCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="cache_warmer"/>
      <call method="setName">
        <argument>cache:warmup</argument>
      </call>
      <call method="setDescription">
        <argument>Warm up an empty cache</argument>
      </call>
    </service>
    <service id="console.command.config_debug" class="Symfony\Bundle\FrameworkBundle\Command\ConfigDebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>debug:config</argument>
      </call>
      <call method="setDescription">
        <argument>Dump the current configuration for an extension</argument>
      </call>
    </service>
    <service id="console.command.config_dump_reference" class="Symfony\Bundle\FrameworkBundle\Command\ConfigDumpReferenceCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>config:dump-reference</argument>
      </call>
      <call method="setDescription">
        <argument>Dump the default configuration for an extension</argument>
      </call>
    </service>
    <service id="console.command.container_debug" class="Symfony\Bundle\FrameworkBundle\Command\ContainerDebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>debug:container</argument>
      </call>
      <call method="setDescription">
        <argument>Display current services for an application</argument>
      </call>
    </service>
    <service id="console.command.container_lint" class="Symfony\Bundle\FrameworkBundle\Command\ContainerLintCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>lint:container</argument>
      </call>
      <call method="setDescription">
        <argument>Ensure that arguments injected into services match type declarations</argument>
      </call>
    </service>
    <service id="console.command.debug_autowiring" class="Symfony\Bundle\FrameworkBundle\Command\DebugAutowiringCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument>null</argument>
      <argument type="service" id="debug.file_link_formatter" on-invalid="null"/>
      <call method="setName">
        <argument>debug:autowiring</argument>
      </call>
      <call method="setDescription">
        <argument>List classes/interfaces you can use for autowiring</argument>
      </call>
    </service>
    <service id="console.command.dotenv_debug" class="Symfony\Component\Dotenv\Command\DebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument>dev</argument>
      <argument>/var/www</argument>
      <call method="setName">
        <argument>debug:dotenv</argument>
      </call>
      <call method="setDescription">
        <argument>List all dotenv files with variables and values</argument>
      </call>
    </service>
    <service id="console.command.event_dispatcher_debug" class="Symfony\Bundle\FrameworkBundle\Command\EventDispatcherDebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id=".service_locator.9ETxUxh"/>
      <call method="setName">
        <argument>debug:event-dispatcher</argument>
      </call>
      <call method="setDescription">
        <argument>Display configured listeners for an application</argument>
      </call>
    </service>
    <service id="console.command.router_debug" class="Symfony\Bundle\FrameworkBundle\Command\RouterDebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="router.default"/>
      <argument type="service" id="debug.file_link_formatter" on-invalid="null"/>
      <call method="setName">
        <argument>debug:router</argument>
      </call>
      <call method="setDescription">
        <argument>Display current routes for an application</argument>
      </call>
    </service>
    <service id="console.command.router_match" class="Symfony\Bundle\FrameworkBundle\Command\RouterMatchCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="router.default"/>
      <argument type="tagged_iterator" tag="routing.expression_language_provider"/>
      <call method="setName">
        <argument>router:match</argument>
      </call>
      <call method="setDescription">
        <argument>Help debug routes by simulating a path info match</argument>
      </call>
    </service>
    <service id="console.command.yaml_lint" class="Symfony\Bundle\FrameworkBundle\Command\YamlLintCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>lint:yaml</argument>
      </call>
      <call method="setDescription">
        <argument>Lint a YAML file and outputs encountered errors</argument>
      </call>
    </service>
    <service id="console.command.form_debug" class="Symfony\Component\Form\Command\DebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="form.registry"/>
      <argument type="collection">
        <argument>Symfony\Component\Form\Extension\Core\Type</argument>
      </argument>
      <argument type="collection">
        <argument>Symfony\Component\Form\Extension\Core\Type\FormType</argument>
        <argument>Symfony\Component\Form\Extension\Core\Type\ChoiceType</argument>
        <argument>Symfony\Component\Form\Extension\Core\Type\FileType</argument>
        <argument>Symfony\Component\Form\Extension\Core\Type\ColorType</argument>
      </argument>
      <argument type="collection">
        <argument>Symfony\Component\Form\Extension\Core\Type\TransformationFailureExtension</argument>
        <argument>Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension</argument>
        <argument>Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension</argument>
        <argument>Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension</argument>
      </argument>
      <argument type="collection"/>
      <argument type="service" id="debug.file_link_formatter" on-invalid="null"/>
      <call method="setName">
        <argument>debug:form</argument>
      </call>
      <call method="setDescription">
        <argument>Display form type information</argument>
      </call>
    </service>
    <service id="console.command.secrets_set" class="Symfony\Bundle\FrameworkBundle\Command\SecretsSetCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="null"/>
      <call method="setName">
        <argument>secrets:set</argument>
      </call>
      <call method="setDescription">
        <argument>Set a secret in the vault</argument>
      </call>
    </service>
    <service id="console.command.secrets_remove" class="Symfony\Bundle\FrameworkBundle\Command\SecretsRemoveCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="null"/>
      <call method="setName">
        <argument>secrets:remove</argument>
      </call>
      <call method="setDescription">
        <argument>Remove a secret from the vault</argument>
      </call>
    </service>
    <service id="console.command.secrets_generate_key" class="Symfony\Bundle\FrameworkBundle\Command\SecretsGenerateKeysCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="ignore"/>
      <call method="setName">
        <argument>secrets:generate-keys</argument>
      </call>
      <call method="setDescription">
        <argument>Generate new encryption keys</argument>
      </call>
    </service>
    <service id="console.command.secrets_list" class="Symfony\Bundle\FrameworkBundle\Command\SecretsListCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="ignore"/>
      <call method="setName">
        <argument>secrets:list</argument>
      </call>
      <call method="setDescription">
        <argument>List all secrets</argument>
      </call>
    </service>
    <service id="console.command.secrets_decrypt_to_local" class="Symfony\Bundle\FrameworkBundle\Command\SecretsDecryptToLocalCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="ignore"/>
      <call method="setName">
        <argument>secrets:decrypt-to-local</argument>
      </call>
      <call method="setDescription">
        <argument>Decrypt all secrets and stores them in the local vault</argument>
      </call>
    </service>
    <service id="console.command.secrets_encrypt_from_local" class="Symfony\Bundle\FrameworkBundle\Command\SecretsEncryptFromLocalCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="ignore"/>
      <call method="setName">
        <argument>secrets:encrypt-from-local</argument>
      </call>
      <call method="setDescription">
        <argument>Encrypt all local secrets to the vault</argument>
      </call>
    </service>
    <service id="console.messenger.application" class="Symfony\Bundle\FrameworkBundle\Console\Application" shared="false">
      <argument type="service" id="kernel"/>
      <call method="setAutoExit">
        <argument>false</argument>
      </call>
    </service>
    <service id="console.messenger.execute_command_handler" class="Symfony\Component\Console\Messenger\RunCommandMessageHandler">
      <tag name="messenger.message_handler"/>
      <argument type="service" id="console.messenger.application"/>
    </service>
    <service id="cache.app" class="Symfony\Component\Cache\Adapter\FilesystemAdapter" public="true">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>aqN3InANu1</argument>
      <argument>0</argument>
      <argument>/var/www/var/cache/dev/pools/app</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.app.taggable" class="Symfony\Component\Cache\Adapter\TagAwareAdapter">
      <tag name="cache.taggable" pool="cache.app"/>
      <argument type="service" id="cache.app"/>
    </service>
    <service id="cache.system" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="true">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>FplKveb610</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/var/www/var/cache/dev/pools/system</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.validator" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>nBxDQtMTBr</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/var/www/var/cache/dev/pools/system</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.serializer" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>uct2QaVBtd</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/var/www/var/cache/dev/pools/system</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.annotations" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>DaSegQqWBA</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/var/www/var/cache/dev/pools/system</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.property_info" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>B+AlvVTj5f</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/var/www/var/cache/dev/pools/system</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.adapter.system" class="Symfony\Component\Cache\Adapter\AdapterInterface" abstract="true">
      <tag name="cache.pool" clearer="cache.system_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/var/www/var/cache/dev/pools/system</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.adapter.apcu" class="Symfony\Component\Cache\Adapter\ApcuAdapter" abstract="true">
      <tag name="cache.pool" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.filesystem" class="Symfony\Component\Cache\Adapter\FilesystemAdapter" abstract="true">
      <tag name="cache.pool" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument>0</argument>
      <argument>/var/www/var/cache/dev/pools/app</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.psr6" class="Symfony\Component\Cache\Adapter\ProxyAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_psr6_provider" clearer="cache.default_clearer" reset="reset"/>
      <argument type="abstract">PSR-6 provider service</argument>
      <argument></argument>
      <argument>0</argument>
    </service>
    <service id="cache.adapter.redis" class="Symfony\Component\Cache\Adapter\RedisAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_redis_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument type="abstract">Redis connection service</argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.redis_tag_aware" class="Symfony\Component\Cache\Adapter\RedisTagAwareAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_redis_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument type="abstract">Redis connection service</argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.memcached" class="Symfony\Component\Cache\Adapter\MemcachedAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_memcached_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument type="abstract">Memcached connection service</argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.doctrine_dbal" class="Symfony\Component\Cache\Adapter\DoctrineDbalAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_doctrine_dbal_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument type="abstract">DBAL connection service</argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="collection"/>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.pdo" class="Symfony\Component\Cache\Adapter\PdoAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_pdo_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument type="abstract">PDO connection service</argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="collection"/>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.array" class="Symfony\Component\Cache\Adapter\ArrayAdapter" abstract="true">
      <tag name="cache.pool" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument>0</argument>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.default_marshaller" class="Symfony\Component\Cache\Marshaller\DefaultMarshaller">
      <argument>null</argument>
      <argument>true</argument>
    </service>
    <service id="cache.default_clearer" class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer">
      <tag name="cache.pool.clearer"/>
      <argument type="collection">
        <argument key="cache.app" type="service" id="cache.app" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id="cache.system_clearer" class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer" public="true">
      <tag name="cache.pool.clearer"/>
      <tag name="kernel.cache_clearer"/>
      <argument type="collection">
        <argument key="cache.system" type="service" id="cache.system" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator" type="service" id="cache.validator" on-invalid="ignore_uninitialized"/>
        <argument key="cache.serializer" type="service" id="cache.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="cache.annotations" type="service" id="cache.annotations" on-invalid="ignore_uninitialized"/>
        <argument key="cache.property_info" type="service" id="cache.property_info" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id="cache.global_clearer" class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer" public="true">
      <tag name="cache.pool.clearer"/>
      <argument type="collection">
        <argument key="cache.app" type="service" id="cache.app" on-invalid="ignore_uninitialized"/>
        <argument key="cache.system" type="service" id="cache.system" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator" type="service" id="cache.validator" on-invalid="ignore_uninitialized"/>
        <argument key="cache.serializer" type="service" id="cache.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="cache.annotations" type="service" id="cache.annotations" on-invalid="ignore_uninitialized"/>
        <argument key="cache.property_info" type="service" id="cache.property_info" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id="debug.error_handler_configurator" class="Symfony\Component\HttpKernel\Debug\ErrorHandlerConfigurator" public="true">
      <tag name="monolog.logger" channel="php"/>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument>null</argument>
      <argument>-1</argument>
      <argument>true</argument>
      <argument>true</argument>
      <argument>null</argument>
    </service>
    <service id="debug.debug_handlers_listener" class="Symfony\Component\HttpKernel\EventListener\DebugHandlersListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument>null</argument>
      <argument>%env(bool:default::key:web:default:kernel.runtime_mode:)%</argument>
    </service>
    <service id="debug.file_link_formatter" class="Symfony\Component\ErrorHandler\ErrorRenderer\FileLinkFormatter">
      <argument>%env(default::SYMFONY_IDE)%</argument>
    </service>
    <service id="routing.resolver" class="Symfony\Component\Config\Loader\LoaderResolver">
      <call method="addLoader">
        <argument type="service" id="routing.loader.xml"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.yml"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.php"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.glob"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.directory"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.container"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.attribute"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.attribute.directory"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.attribute.file"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.psr4"/>
      </call>
    </service>
    <service id="routing.loader.xml" class="Symfony\Component\Routing\Loader\XmlFileLoader">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
      <argument>dev</argument>
    </service>
    <service id="routing.loader.yml" class="Symfony\Component\Routing\Loader\YamlFileLoader">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
      <argument>dev</argument>
    </service>
    <service id="routing.loader.php" class="Symfony\Component\Routing\Loader\PhpFileLoader">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
      <argument>dev</argument>
    </service>
    <service id="routing.loader.glob" class="Symfony\Component\Routing\Loader\GlobFileLoader">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
      <argument>dev</argument>
    </service>
    <service id="routing.loader.directory" class="Symfony\Component\Routing\Loader\DirectoryLoader">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
      <argument>dev</argument>
    </service>
    <service id="routing.loader.container" class="Symfony\Component\Routing\Loader\ContainerLoader">
      <tag name="routing.loader"/>
      <argument type="service" id=".service_locator..6hZeC_"/>
      <argument>dev</argument>
    </service>
    <service id="routing.loader.attribute" class="Symfony\Bundle\FrameworkBundle\Routing\AttributeRouteControllerLoader">
      <tag name="routing.loader" priority="-10"/>
      <argument>dev</argument>
    </service>
    <service id="routing.loader.attribute.directory" class="Symfony\Component\Routing\Loader\AttributeDirectoryLoader">
      <tag name="routing.loader" priority="-10"/>
      <argument type="service" id="file_locator"/>
      <argument type="service" id="routing.loader.attribute"/>
    </service>
    <service id="routing.loader.attribute.file" class="Symfony\Component\Routing\Loader\AttributeFileLoader">
      <tag name="routing.loader" priority="-10"/>
      <argument type="service" id="file_locator"/>
      <argument type="service" id="routing.loader.attribute"/>
    </service>
    <service id="routing.loader.psr4" class="Symfony\Component\Routing\Loader\Psr4DirectoryLoader">
      <tag name="routing.loader" priority="-10"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader" class="Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader" public="true">
      <argument type="service" id="routing.resolver"/>
      <argument type="collection">
        <argument key="utf8">true</argument>
      </argument>
      <argument type="collection"/>
    </service>
    <service id="router.default" class="Symfony\Bundle\FrameworkBundle\Routing\Router">
      <tag name="monolog.logger" channel="router"/>
      <tag name="container.service_subscriber" id="routing.loader"/>
      <argument type="service" id=".service_locator.PvoQzFT.router.default"/>
      <argument>kernel::loadRoutes</argument>
      <argument type="collection">
        <argument key="cache_dir">/var/www/var/cache/dev</argument>
        <argument key="debug">true</argument>
        <argument key="generator_class">Symfony\Component\Routing\Generator\CompiledUrlGenerator</argument>
        <argument key="generator_dumper_class">Symfony\Component\Routing\Generator\Dumper\CompiledUrlGeneratorDumper</argument>
        <argument key="matcher_class">Symfony\Bundle\FrameworkBundle\Routing\RedirectableCompiledUrlMatcher</argument>
        <argument key="matcher_dumper_class">Symfony\Component\Routing\Matcher\Dumper\CompiledUrlMatcherDumper</argument>
        <argument key="strict_requirements">true</argument>
        <argument key="resource_type">service</argument>
      </argument>
      <argument type="service" id="router.request_context" on-invalid="ignore"/>
      <argument type="service" id="parameter_bag" on-invalid="ignore"/>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <argument>en</argument>
      <call method="setConfigCacheFactory">
        <argument type="service" id="config_cache_factory"/>
      </call>
    </service>
    <service id="router.request_context" class="Symfony\Component\Routing\RequestContext" constructor="fromUri">
      <argument></argument>
      <argument>localhost</argument>
      <argument>http</argument>
      <argument>80</argument>
      <argument>443</argument>
    </service>
    <service id="router.cache_warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\RouterCacheWarmer">
      <tag name="container.service_subscriber" id="router"/>
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id=".service_locator.cUcW89y.router.cache_warmer"/>
    </service>
    <service id="router_listener" class="Symfony\Component\HttpKernel\EventListener\RouterListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="request"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="router.default"/>
      <argument type="service" id="request_stack"/>
      <argument type="service" id="router.request_context" on-invalid="ignore"/>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <argument>/var/www</argument>
      <argument>true</argument>
    </service>
    <service id="Symfony\Bundle\FrameworkBundle\Controller\RedirectController" class="Symfony\Bundle\FrameworkBundle\Controller\RedirectController" public="true">
      <argument type="service" id="router.default"/>
      <argument type="service">
        <service class="int">
          <factory service="router.request_context" method="getHttpPort"/>
        </service>
      </argument>
      <argument type="service">
        <service class="int">
          <factory service="router.request_context" method="getHttpsPort"/>
        </service>
      </argument>
    </service>
    <service id="Symfony\Bundle\FrameworkBundle\Controller\TemplateController" class="Symfony\Bundle\FrameworkBundle\Controller\TemplateController" public="true">
      <argument>null</argument>
    </service>
    <service id="property_accessor" class="Symfony\Component\PropertyAccess\PropertyAccessor">
      <argument>3</argument>
      <argument>2</argument>
      <argument type="service" id="cache.property_access" on-invalid="ignore"/>
      <argument type="service" id="property_info.reflection_extractor" on-invalid="null"/>
      <argument type="service" id="property_info.reflection_extractor" on-invalid="null"/>
    </service>
    <service id="secrets.vault" class="Symfony\Bundle\FrameworkBundle\Secrets\SodiumVault">
      <tag name="container.env_var_loader"/>
      <argument>/var/www/config/secrets/%env(default:kernel.environment:APP_RUNTIME_ENV)%</argument>
      <argument type="service" id="secrets.decryption_key" on-invalid="ignore"/>
    </service>
    <service id="secrets.decryption_key" class="Symfony\Component\String\LazyString" constructor="fromCallable">
      <argument type="service" id="container.getenv"/>
      <argument>base64:default::SYMFONY_DECRYPTION_SECRET</argument>
    </service>
    <service id="secrets.local_vault" class="Symfony\Bundle\FrameworkBundle\Secrets\DotenvVault">
      <argument>/var/www/.env.dev.local</argument>
    </service>
    <service id="property_info" class="Symfony\Component\PropertyInfo\PropertyInfoExtractor">
      <argument type="iterator">
        <argument type="service" id="property_info.reflection_extractor"/>
      </argument>
      <argument type="iterator">
        <argument type="service" id="property_info.reflection_extractor"/>
      </argument>
      <argument type="iterator"/>
      <argument type="iterator">
        <argument type="service" id="property_info.reflection_extractor"/>
      </argument>
      <argument type="iterator">
        <argument type="service" id="property_info.reflection_extractor"/>
      </argument>
    </service>
    <service id="property_info.reflection_extractor" class="Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor">
      <tag name="property_info.list_extractor" priority="-1000"/>
      <tag name="property_info.type_extractor" priority="-1002"/>
      <tag name="property_info.access_extractor" priority="-1000"/>
      <tag name="property_info.initializable_extractor" priority="-1000"/>
    </service>
    <service id=".cache_connection.GD_MSZC" class="Symfony\Component\Cache\Adapter\AbstractAdapter" constructor="createConnection">
      <argument>redis://localhost</argument>
      <argument type="collection">
        <argument key="lazy">true</argument>
      </argument>
    </service>
    <service id=".cache_connection.JKE6keX" class="Symfony\Component\Cache\Adapter\AbstractAdapter" constructor="createConnection">
      <argument>memcached://localhost</argument>
      <argument type="collection">
        <argument key="lazy">true</argument>
      </argument>
    </service>
    <service id="cache.property_access" class="Symfony\Component\Cache\Adapter\ArrayAdapter">
      <argument>0</argument>
      <argument>false</argument>
    </service>
    <service id="session.factory" class="Symfony\Component\HttpFoundation\Session\SessionFactory">
      <argument type="service" id="request_stack"/>
      <argument type="service" id="session.storage.factory.native"/>
      <argument type="collection">
        <argument type="service" id="session_listener"/>
        <argument>onSessionUsage</argument>
      </argument>
    </service>
    <service id="session.storage.factory.native" class="Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorageFactory">
      <argument>%session.storage.options%</argument>
      <argument type="service" id="session.handler.native"/>
      <argument type="service">
        <service class="Symfony\Component\HttpFoundation\Session\Storage\MetadataBag">
          <argument>_sf2_meta</argument>
          <argument>0</argument>
        </service>
      </argument>
      <argument>true</argument>
    </service>
    <service id="session.storage.factory.php_bridge" class="Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorageFactory">
      <argument type="service" id="session.handler.native"/>
      <argument type="service">
        <service class="Symfony\Component\HttpFoundation\Session\Storage\MetadataBag">
          <argument>_sf2_meta</argument>
          <argument>0</argument>
        </service>
      </argument>
      <argument>true</argument>
    </service>
    <service id="session.storage.factory.mock_file" class="Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorageFactory">
      <argument>/var/www/var/cache/dev/sessions</argument>
      <argument>MOCKSESSID</argument>
      <argument type="service">
        <service class="Symfony\Component\HttpFoundation\Session\Storage\MetadataBag">
          <argument>_sf2_meta</argument>
          <argument>0</argument>
        </service>
      </argument>
    </service>
    <service id="session.handler.native" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler">
      <argument type="service">
        <service class="SessionHandler"/>
      </argument>
    </service>
    <service id="session.handler.native_file" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler">
      <argument type="service">
        <service class="Symfony\Component\HttpFoundation\Session\Storage\Handler\NativeFileSessionHandler">
          <argument>null</argument>
        </service>
      </argument>
    </service>
    <service id="session.abstract_handler" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler">
      <argument type="abstract">A string or a connection object</argument>
      <argument type="collection"/>
      <factory class="Symfony\Component\HttpFoundation\Session\Storage\Handler\SessionHandlerFactory" method="createHandler"/>
    </service>
    <service id="session_listener" class="Symfony\Component\HttpKernel\EventListener\SessionListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="kernel.reset" method="reset"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id=".service_locator.cXsfP3P"/>
      <argument>true</argument>
      <argument>%session.storage.options%</argument>
    </service>
    <service id="session.marshaller" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\IdentityMarshaller"/>
    <service id="form.resolved_type_factory" class="Symfony\Component\Form\ResolvedFormTypeFactory"/>
    <service id="form.registry" class="Symfony\Component\Form\FormRegistry">
      <argument type="collection">
        <argument type="service" id="form.extension"/>
      </argument>
      <argument type="service" id="form.resolved_type_factory"/>
    </service>
    <service id="form.factory" class="Symfony\Component\Form\FormFactory">
      <argument type="service" id="form.registry"/>
    </service>
    <service id="form.extension" class="Symfony\Component\Form\Extension\DependencyInjection\DependencyInjectionExtension">
      <argument type="service" id=".service_locator.HJVVhIz"/>
      <argument type="collection">
        <argument key="Symfony\Component\Form\Extension\Core\Type\FormType" type="iterator">
          <argument type="service" id="form.type_extension.form.transformation_failure_handling"/>
          <argument type="service" id="form.type_extension.form.http_foundation"/>
        </argument>
        <argument key="Symfony\Component\Form\Extension\Core\Type\RepeatedType" type="iterator">
          <argument type="service" id="form.type_extension.repeated.validator"/>
        </argument>
        <argument key="Symfony\Component\Form\Extension\Core\Type\SubmitType" type="iterator">
          <argument type="service" id="form.type_extension.submit.validator"/>
        </argument>
      </argument>
      <argument type="iterator"/>
    </service>
    <service id="form.choice_list_factory.default" class="Symfony\Component\Form\ChoiceList\Factory\DefaultChoiceListFactory"/>
    <service id="form.choice_list_factory.property_access" class="Symfony\Component\Form\ChoiceList\Factory\PropertyAccessDecorator">
      <argument type="service" id="form.choice_list_factory.default"/>
      <argument type="service" id="property_accessor"/>
    </service>
    <service id="form.choice_list_factory.cached" class="Symfony\Component\Form\ChoiceList\Factory\CachingFactoryDecorator">
      <tag name="kernel.reset" method="reset"/>
      <argument type="service" id="form.choice_list_factory.property_access"/>
    </service>
    <service id="form.type.form" class="Symfony\Component\Form\Extension\Core\Type\FormType">
      <tag name="form.type"/>
      <argument type="service" id="property_accessor"/>
    </service>
    <service id="form.type.choice" class="Symfony\Component\Form\Extension\Core\Type\ChoiceType">
      <tag name="form.type"/>
      <argument type="service" id="form.choice_list_factory.cached"/>
      <argument>null</argument>
    </service>
    <service id="form.type.file" class="Symfony\Component\Form\Extension\Core\Type\FileType">
      <tag name="form.type"/>
      <argument>null</argument>
    </service>
    <service id="form.type.color" class="Symfony\Component\Form\Extension\Core\Type\ColorType">
      <tag name="form.type"/>
      <argument>null</argument>
    </service>
    <service id="form.type_extension.form.transformation_failure_handling" class="Symfony\Component\Form\Extension\Core\Type\TransformationFailureExtension">
      <tag name="form.type_extension" extended-type="Symfony\Component\Form\Extension\Core\Type\FormType"/>
      <argument>null</argument>
    </service>
    <service id="form.type_extension.form.http_foundation" class="Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension">
      <tag name="form.type_extension"/>
      <argument type="service" id="form.type_extension.form.request_handler"/>
    </service>
    <service id="form.type_extension.form.request_handler" class="Symfony\Component\Form\Extension\HttpFoundation\HttpFoundationRequestHandler">
      <argument type="service" id="form.server_params"/>
    </service>
    <service id="form.server_params" class="Symfony\Component\Form\Util\ServerParams">
      <argument type="service" id="request_stack"/>
    </service>
    <service id="form.type_extension.repeated.validator" class="Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension">
      <tag name="form.type_extension"/>
    </service>
    <service id="form.type_extension.submit.validator" class="Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension">
      <tag name="form.type_extension" extended-type="Symfony\Component\Form\Extension\Core\Type\SubmitType"/>
    </service>
    <service id="maker.file_manager" class="Symfony\Bundle\MakerBundle\FileManager">
      <argument type="service" id="filesystem"/>
      <argument type="service" id="maker.autoloader_util"/>
      <argument type="service" id="maker.file_link_formatter"/>
      <argument>/var/www</argument>
      <argument>null</argument>
    </service>
    <service id="maker.autoloader_finder" class="Symfony\Bundle\MakerBundle\Util\ComposerAutoloaderFinder">
      <argument>App</argument>
    </service>
    <service id="maker.autoloader_util" class="Symfony\Bundle\MakerBundle\Util\AutoloaderUtil">
      <argument type="service" id="maker.autoloader_finder"/>
    </service>
    <service id="maker.file_link_formatter" class="Symfony\Bundle\MakerBundle\Util\MakerFileLinkFormatter">
      <argument type="service" id="debug.file_link_formatter" on-invalid="ignore"/>
    </service>
    <service id="maker.event_registry" class="Symfony\Bundle\MakerBundle\EventRegistry">
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="maker.console_error_listener" class="Symfony\Bundle\MakerBundle\Event\ConsoleErrorSubscriber">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.no_preload"/>
    </service>
    <service id="maker.doctrine_helper" class="Symfony\Bundle\MakerBundle\Doctrine\DoctrineHelper">
      <argument>App\Entity</argument>
      <argument>null</argument>
    </service>
    <service id="maker.template_linter" class="Symfony\Bundle\MakerBundle\Util\TemplateLinter">
      <argument>%env(default::string:MAKER_PHP_CS_FIXER_BINARY_PATH)%</argument>
      <argument>%env(default::string:MAKER_PHP_CS_FIXER_CONFIG_PATH)%</argument>
    </service>
    <service id="maker.auto_command.abstract" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" abstract="true">
      <argument></argument>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
    </service>
    <service id="maker.generator" class="Symfony\Bundle\MakerBundle\Generator">
      <argument type="service" id="maker.file_manager"/>
      <argument>App</argument>
      <argument>null</argument>
      <argument type="service" id="maker.template_component_generator"/>
    </service>
    <service id="maker.entity_class_generator" class="Symfony\Bundle\MakerBundle\Doctrine\EntityClassGenerator">
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.doctrine_helper"/>
    </service>
    <service id="maker.user_class_builder" class="Symfony\Bundle\MakerBundle\Security\UserClassBuilder"/>
    <service id="maker.security_config_updater" class="Symfony\Bundle\MakerBundle\Security\SecurityConfigUpdater"/>
    <service id="maker.renderer.form_type_renderer" class="Symfony\Bundle\MakerBundle\Renderer\FormTypeRenderer">
      <argument type="service" id="maker.generator"/>
    </service>
    <service id="maker.security_controller_builder" class="Symfony\Bundle\MakerBundle\Security\SecurityControllerBuilder"/>
    <service id="maker.php_compat_util" class="Symfony\Bundle\MakerBundle\Util\PhpCompatUtil">
      <argument type="service" id="maker.file_manager"/>
    </service>
    <service id="maker.template_component_generator" class="Symfony\Bundle\MakerBundle\Util\TemplateComponentGenerator"/>
    <service id="maker.maker.make_authenticator" class="Symfony\Bundle\MakerBundle\Maker\MakeAuthenticator">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.security_config_updater"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.doctrine_helper"/>
      <argument type="service" id="maker.security_controller_builder"/>
    </service>
    <service id="maker.maker.make_command" class="Symfony\Bundle\MakerBundle\Maker\MakeCommand">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_twig_component" class="Symfony\Bundle\MakerBundle\Maker\MakeTwigComponent">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_controller" class="Symfony\Bundle\MakerBundle\Maker\MakeController">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_crud" class="Symfony\Bundle\MakerBundle\Maker\MakeCrud">
      <tag name="maker.command"/>
      <argument type="service" id="maker.doctrine_helper"/>
      <argument type="service" id="maker.renderer.form_type_renderer"/>
    </service>
    <service id="maker.maker.make_docker_database" class="Symfony\Bundle\MakerBundle\Maker\MakeDockerDatabase">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
    </service>
    <service id="maker.maker.make_entity" class="Symfony\Bundle\MakerBundle\Maker\MakeEntity">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.doctrine_helper"/>
      <argument>null</argument>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.entity_class_generator"/>
    </service>
    <service id="maker.maker.make_fixtures" class="Symfony\Bundle\MakerBundle\Maker\MakeFixtures">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_form" class="Symfony\Bundle\MakerBundle\Maker\MakeForm">
      <tag name="maker.command"/>
      <argument type="service" id="maker.doctrine_helper"/>
      <argument type="service" id="maker.renderer.form_type_renderer"/>
    </service>
    <service id="maker.maker.make_functional_test" class="Symfony\Bundle\MakerBundle\Maker\MakeFunctionalTest">
      <tag name="maker.command"/>
      <deprecated package="symfony/maker-bundle" version="1.29">The "%service_id%" service is deprecated, use "maker.maker.make_test" instead.</deprecated>
    </service>
    <service id="maker.maker.make_listener" class="Symfony\Bundle\MakerBundle\Maker\MakeListener">
      <tag name="maker.command"/>
      <argument type="service" id="maker.event_registry"/>
    </service>
    <service id="maker.maker.make_message" class="Symfony\Bundle\MakerBundle\Maker\MakeMessage">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
    </service>
    <service id="maker.maker.make_messenger_middleware" class="Symfony\Bundle\MakerBundle\Maker\MakeMessengerMiddleware">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_registration_form" class="Symfony\Bundle\MakerBundle\Maker\MakeRegistrationForm">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.renderer.form_type_renderer"/>
      <argument type="service" id="maker.doctrine_helper"/>
      <argument type="service" id="router.default" on-invalid="ignore"/>
    </service>
    <service id="maker.maker.make_reset_password" class="Symfony\Bundle\MakerBundle\Maker\MakeResetPassword">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.doctrine_helper"/>
      <argument type="service" id="maker.entity_class_generator"/>
    </service>
    <service id="maker.maker.make_serializer_encoder" class="Symfony\Bundle\MakerBundle\Maker\MakeSerializerEncoder">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_serializer_normalizer" class="Symfony\Bundle\MakerBundle\Maker\MakeSerializerNormalizer">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_subscriber" class="Symfony\Bundle\MakerBundle\Maker\MakeSubscriber">
      <tag name="maker.command"/>
      <argument type="service" id="maker.event_registry"/>
      <deprecated package="symfony/maker-bundle" version="1.51">The "%service_id%" service is deprecated, use "maker.maker.make_listener" instead.</deprecated>
    </service>
    <service id="maker.maker.make_twig_extension" class="Symfony\Bundle\MakerBundle\Maker\MakeTwigExtension">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_test" class="Symfony\Bundle\MakerBundle\Maker\MakeTest">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_unit_test" class="Symfony\Bundle\MakerBundle\Maker\MakeUnitTest">
      <tag name="maker.command"/>
      <deprecated package="symfony/maker-bundle" version="1.29">The "%service_id%" service is deprecated, use "maker.maker.make_test" instead.</deprecated>
    </service>
    <service id="maker.maker.make_validator" class="Symfony\Bundle\MakerBundle\Maker\MakeValidator">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_voter" class="Symfony\Bundle\MakerBundle\Maker\MakeVoter">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_user" class="Symfony\Bundle\MakerBundle\Maker\MakeUser">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.user_class_builder"/>
      <argument type="service" id="maker.security_config_updater"/>
      <argument type="service" id="maker.entity_class_generator"/>
      <argument type="service" id="maker.doctrine_helper"/>
    </service>
    <service id="maker.maker.make_migration" class="Symfony\Bundle\MakerBundle\Maker\MakeMigration">
      <tag name="maker.command"/>
      <argument>/var/www</argument>
      <argument type="service" id="maker.file_link_formatter"/>
    </service>
    <service id="maker.maker.make_stimulus_controller" class="Symfony\Bundle\MakerBundle\Maker\MakeStimulusController">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_form_login" class="Symfony\Bundle\MakerBundle\Maker\Security\MakeFormLogin">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.security_config_updater"/>
      <argument type="service" id="maker.security_controller_builder"/>
    </service>
    <service id="aws_sdk" class="Aws\Sdk">
      <argument type="collection">
        <argument key="version">latest</argument>
        <argument key="region">us-east-1</argument>
        <argument key="credentials" type="collection">
          <argument key="key">%env(AWS_KEY)%</argument>
          <argument key="secret">%env(AWS_SECRET)%</argument>
        </argument>
        <argument key="ua_append" type="collection">
          <argument>Symfony/6.4.5</argument>
          <argument>SYMOD/2.5.0</argument>
        </argument>
      </argument>
    </service>
    <service id="aws.accessanalyzer" class="Aws\AccessAnalyzer\AccessAnalyzerClient" lazy="true">
      <argument>AccessAnalyzer</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.account" class="Aws\Account\AccountClient" lazy="true">
      <argument>Account</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.acmpca" class="Aws\ACMPCA\ACMPCAClient" lazy="true">
      <argument>ACMPCA</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.acm" class="Aws\Acm\AcmClient" lazy="true">
      <argument>Acm</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.alexaforbusiness" class="Aws\AlexaForBusiness\AlexaForBusinessClient" lazy="true">
      <argument>AlexaForBusiness</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.prometheusservice" class="Aws\PrometheusService\PrometheusServiceClient" lazy="true">
      <argument>PrometheusService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.amplify" class="Aws\Amplify\AmplifyClient" lazy="true">
      <argument>Amplify</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.amplifybackend" class="Aws\AmplifyBackend\AmplifyBackendClient" lazy="true">
      <argument>AmplifyBackend</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.amplifyuibuilder" class="Aws\AmplifyUIBuilder\AmplifyUIBuilderClient" lazy="true">
      <argument>AmplifyUIBuilder</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.apigateway" class="Aws\ApiGateway\ApiGatewayClient" lazy="true">
      <argument>ApiGateway</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.apigatewaymanagementapi" class="Aws\ApiGatewayManagementApi\ApiGatewayManagementApiClient" lazy="true">
      <argument>ApiGatewayManagementApi</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.apigatewayv2" class="Aws\ApiGatewayV2\ApiGatewayV2Client" lazy="true">
      <argument>ApiGatewayV2</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.appconfig" class="Aws\AppConfig\AppConfigClient" lazy="true">
      <argument>AppConfig</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.appconfigdata" class="Aws\AppConfigData\AppConfigDataClient" lazy="true">
      <argument>AppConfigData</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.appfabric" class="Aws\AppFabric\AppFabricClient" lazy="true">
      <argument>AppFabric</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.appflow" class="Aws\Appflow\AppflowClient" lazy="true">
      <argument>Appflow</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.appintegrationsservice" class="Aws\AppIntegrationsService\AppIntegrationsServiceClient" lazy="true">
      <argument>AppIntegrationsService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.applicationautoscaling" class="Aws\ApplicationAutoScaling\ApplicationAutoScalingClient" lazy="true">
      <argument>ApplicationAutoScaling</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.applicationinsights" class="Aws\ApplicationInsights\ApplicationInsightsClient" lazy="true">
      <argument>ApplicationInsights</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.applicationcostprofiler" class="Aws\ApplicationCostProfiler\ApplicationCostProfilerClient" lazy="true">
      <argument>ApplicationCostProfiler</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.appmesh" class="Aws\AppMesh\AppMeshClient" lazy="true">
      <argument>AppMesh</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.apprunner" class="Aws\AppRunner\AppRunnerClient" lazy="true">
      <argument>AppRunner</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.appstream" class="Aws\Appstream\AppstreamClient" lazy="true">
      <argument>Appstream</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.appsync" class="Aws\AppSync\AppSyncClient" lazy="true">
      <argument>AppSync</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.arczonalshift" class="Aws\ARCZonalShift\ARCZonalShiftClient" lazy="true">
      <argument>ARCZonalShift</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.artifact" class="Aws\Artifact\ArtifactClient" lazy="true">
      <argument>Artifact</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.athena" class="Aws\Athena\AthenaClient" lazy="true">
      <argument>Athena</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.auditmanager" class="Aws\AuditManager\AuditManagerClient" lazy="true">
      <argument>AuditManager</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.autoscalingplans" class="Aws\AutoScalingPlans\AutoScalingPlansClient" lazy="true">
      <argument>AutoScalingPlans</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.autoscaling" class="Aws\AutoScaling\AutoScalingClient" lazy="true">
      <argument>AutoScaling</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.b2bi" class="Aws\B2bi\B2biClient" lazy="true">
      <argument>B2bi</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.backupgateway" class="Aws\BackupGateway\BackupGatewayClient" lazy="true">
      <argument>BackupGateway</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.backup" class="Aws\Backup\BackupClient" lazy="true">
      <argument>Backup</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.backupstorage" class="Aws\BackupStorage\BackupStorageClient" lazy="true">
      <argument>BackupStorage</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.batch" class="Aws\Batch\BatchClient" lazy="true">
      <argument>Batch</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.bcmdataexports" class="Aws\BCMDataExports\BCMDataExportsClient" lazy="true">
      <argument>BCMDataExports</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.bedrockagentruntime" class="Aws\BedrockAgentRuntime\BedrockAgentRuntimeClient" lazy="true">
      <argument>BedrockAgentRuntime</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.bedrockagent" class="Aws\BedrockAgent\BedrockAgentClient" lazy="true">
      <argument>BedrockAgent</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.bedrockruntime" class="Aws\BedrockRuntime\BedrockRuntimeClient" lazy="true">
      <argument>BedrockRuntime</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.bedrock" class="Aws\Bedrock\BedrockClient" lazy="true">
      <argument>Bedrock</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.billingconductor" class="Aws\BillingConductor\BillingConductorClient" lazy="true">
      <argument>BillingConductor</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.braket" class="Aws\Braket\BraketClient" lazy="true">
      <argument>Braket</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.budgets" class="Aws\Budgets\BudgetsClient" lazy="true">
      <argument>Budgets</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.costexplorer" class="Aws\CostExplorer\CostExplorerClient" lazy="true">
      <argument>CostExplorer</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.chatbot" class="Aws\Chatbot\ChatbotClient" lazy="true">
      <argument>Chatbot</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.chimesdkidentity" class="Aws\ChimeSDKIdentity\ChimeSDKIdentityClient" lazy="true">
      <argument>ChimeSDKIdentity</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.chimesdkmediapipelines" class="Aws\ChimeSDKMediaPipelines\ChimeSDKMediaPipelinesClient" lazy="true">
      <argument>ChimeSDKMediaPipelines</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.chimesdkmeetings" class="Aws\ChimeSDKMeetings\ChimeSDKMeetingsClient" lazy="true">
      <argument>ChimeSDKMeetings</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.chimesdkmessaging" class="Aws\ChimeSDKMessaging\ChimeSDKMessagingClient" lazy="true">
      <argument>ChimeSDKMessaging</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.chimesdkvoice" class="Aws\ChimeSDKVoice\ChimeSDKVoiceClient" lazy="true">
      <argument>ChimeSDKVoice</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.chime" class="Aws\Chime\ChimeClient" lazy="true">
      <argument>Chime</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cleanrooms" class="Aws\CleanRooms\CleanRoomsClient" lazy="true">
      <argument>CleanRooms</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cleanroomsml" class="Aws\CleanRoomsML\CleanRoomsMLClient" lazy="true">
      <argument>CleanRoomsML</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cloud9" class="Aws\Cloud9\Cloud9Client" lazy="true">
      <argument>Cloud9</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cloudcontrolapi" class="Aws\CloudControlApi\CloudControlApiClient" lazy="true">
      <argument>CloudControlApi</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.clouddirectory" class="Aws\CloudDirectory\CloudDirectoryClient" lazy="true">
      <argument>CloudDirectory</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cloudformation" class="Aws\CloudFormation\CloudFormationClient" lazy="true">
      <argument>CloudFormation</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cloudfrontkeyvaluestore" class="Aws\CloudFrontKeyValueStore\CloudFrontKeyValueStoreClient" lazy="true">
      <argument>CloudFrontKeyValueStore</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cloudfront" class="Aws\CloudFront\CloudFrontClient" lazy="true">
      <argument>CloudFront</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cloudhsm" class="Aws\CloudHsm\CloudHsmClient" lazy="true">
      <argument>CloudHsm</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cloudhsmv2" class="Aws\CloudHSMV2\CloudHSMV2Client" lazy="true">
      <argument>CloudHSMV2</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cloudsearch" class="Aws\CloudSearch\CloudSearchClient" lazy="true">
      <argument>CloudSearch</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cloudsearchdomain" class="Aws\CloudSearchDomain\CloudSearchDomainClient" lazy="true">
      <argument>CloudSearchDomain</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cloudtraildata" class="Aws\CloudTrailData\CloudTrailDataClient" lazy="true">
      <argument>CloudTrailData</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cloudtrail" class="Aws\CloudTrail\CloudTrailClient" lazy="true">
      <argument>CloudTrail</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.codeartifact" class="Aws\CodeArtifact\CodeArtifactClient" lazy="true">
      <argument>CodeArtifact</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.codebuild" class="Aws\CodeBuild\CodeBuildClient" lazy="true">
      <argument>CodeBuild</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.codecatalyst" class="Aws\CodeCatalyst\CodeCatalystClient" lazy="true">
      <argument>CodeCatalyst</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.codecommit" class="Aws\CodeCommit\CodeCommitClient" lazy="true">
      <argument>CodeCommit</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.codedeploy" class="Aws\CodeDeploy\CodeDeployClient" lazy="true">
      <argument>CodeDeploy</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.codegurureviewer" class="Aws\CodeGuruReviewer\CodeGuruReviewerClient" lazy="true">
      <argument>CodeGuruReviewer</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.codegurusecurity" class="Aws\CodeGuruSecurity\CodeGuruSecurityClient" lazy="true">
      <argument>CodeGuruSecurity</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.codeguruprofiler" class="Aws\CodeGuruProfiler\CodeGuruProfilerClient" lazy="true">
      <argument>CodeGuruProfiler</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.codepipeline" class="Aws\CodePipeline\CodePipelineClient" lazy="true">
      <argument>CodePipeline</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.codestarconnections" class="Aws\CodeStarconnections\CodeStarconnectionsClient" lazy="true">
      <argument>CodeStarconnections</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.codestarnotifications" class="Aws\CodeStarNotifications\CodeStarNotificationsClient" lazy="true">
      <argument>CodeStarNotifications</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.codestar" class="Aws\CodeStar\CodeStarClient" lazy="true">
      <argument>CodeStar</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cognitoidentity" class="Aws\CognitoIdentity\CognitoIdentityClient" lazy="true">
      <argument>CognitoIdentity</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cognitoidentityprovider" class="Aws\CognitoIdentityProvider\CognitoIdentityProviderClient" lazy="true">
      <argument>CognitoIdentityProvider</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cognitosync" class="Aws\CognitoSync\CognitoSyncClient" lazy="true">
      <argument>CognitoSync</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.comprehend" class="Aws\Comprehend\ComprehendClient" lazy="true">
      <argument>Comprehend</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.comprehendmedical" class="Aws\ComprehendMedical\ComprehendMedicalClient" lazy="true">
      <argument>ComprehendMedical</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.computeoptimizer" class="Aws\ComputeOptimizer\ComputeOptimizerClient" lazy="true">
      <argument>ComputeOptimizer</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.configservice" class="Aws\ConfigService\ConfigServiceClient" lazy="true">
      <argument>ConfigService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.connectcontactlens" class="Aws\ConnectContactLens\ConnectContactLensClient" lazy="true">
      <argument>ConnectContactLens</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.connect" class="Aws\Connect\ConnectClient" lazy="true">
      <argument>Connect</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.connectcampaignservice" class="Aws\ConnectCampaignService\ConnectCampaignServiceClient" lazy="true">
      <argument>ConnectCampaignService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.connectcases" class="Aws\ConnectCases\ConnectCasesClient" lazy="true">
      <argument>ConnectCases</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.connectparticipant" class="Aws\ConnectParticipant\ConnectParticipantClient" lazy="true">
      <argument>ConnectParticipant</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.controltower" class="Aws\ControlTower\ControlTowerClient" lazy="true">
      <argument>ControlTower</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.costoptimizationhub" class="Aws\CostOptimizationHub\CostOptimizationHubClient" lazy="true">
      <argument>CostOptimizationHub</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.costandusagereportservice" class="Aws\CostandUsageReportService\CostandUsageReportServiceClient" lazy="true">
      <argument>CostandUsageReportService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.customerprofiles" class="Aws\CustomerProfiles\CustomerProfilesClient" lazy="true">
      <argument>CustomerProfiles</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.iotdataplane" class="Aws\IotDataPlane\IotDataPlaneClient" lazy="true">
      <argument>IotDataPlane</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.gluedatabrew" class="Aws\GlueDataBrew\GlueDataBrewClient" lazy="true">
      <argument>GlueDataBrew</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.dataexchange" class="Aws\DataExchange\DataExchangeClient" lazy="true">
      <argument>DataExchange</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.datapipeline" class="Aws\DataPipeline\DataPipelineClient" lazy="true">
      <argument>DataPipeline</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.datasync" class="Aws\DataSync\DataSyncClient" lazy="true">
      <argument>DataSync</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.datazone" class="Aws\DataZone\DataZoneClient" lazy="true">
      <argument>DataZone</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.dax" class="Aws\DAX\DAXClient" lazy="true">
      <argument>DAX</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.detective" class="Aws\Detective\DetectiveClient" lazy="true">
      <argument>Detective</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.devicefarm" class="Aws\DeviceFarm\DeviceFarmClient" lazy="true">
      <argument>DeviceFarm</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.devopsguru" class="Aws\DevOpsGuru\DevOpsGuruClient" lazy="true">
      <argument>DevOpsGuru</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.directconnect" class="Aws\DirectConnect\DirectConnectClient" lazy="true">
      <argument>DirectConnect</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.applicationdiscoveryservice" class="Aws\ApplicationDiscoveryService\ApplicationDiscoveryServiceClient" lazy="true">
      <argument>ApplicationDiscoveryService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.dlm" class="Aws\DLM\DLMClient" lazy="true">
      <argument>DLM</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.databasemigrationservice" class="Aws\DatabaseMigrationService\DatabaseMigrationServiceClient" lazy="true">
      <argument>DatabaseMigrationService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.docdbelastic" class="Aws\DocDBElastic\DocDBElasticClient" lazy="true">
      <argument>DocDBElastic</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.docdb" class="Aws\DocDB\DocDBClient" lazy="true">
      <argument>DocDB</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.drs" class="Aws\drs\drsClient" lazy="true">
      <argument>drs</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.directoryservice" class="Aws\DirectoryService\DirectoryServiceClient" lazy="true">
      <argument>DirectoryService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.dynamodb" class="Aws\DynamoDb\DynamoDbClient" lazy="true">
      <argument>DynamoDb</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ebs" class="Aws\EBS\EBSClient" lazy="true">
      <argument>EBS</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ec2instanceconnect" class="Aws\EC2InstanceConnect\EC2InstanceConnectClient" lazy="true">
      <argument>EC2InstanceConnect</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ec2" class="Aws\Ec2\Ec2Client" lazy="true">
      <argument>Ec2</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ecrpublic" class="Aws\ECRPublic\ECRPublicClient" lazy="true">
      <argument>ECRPublic</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ecr" class="Aws\Ecr\EcrClient" lazy="true">
      <argument>Ecr</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ecs" class="Aws\Ecs\EcsClient" lazy="true">
      <argument>Ecs</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.eksauth" class="Aws\EKSAuth\EKSAuthClient" lazy="true">
      <argument>EKSAuth</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.eks" class="Aws\EKS\EKSClient" lazy="true">
      <argument>EKS</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.elasticinference" class="Aws\ElasticInference\ElasticInferenceClient" lazy="true">
      <argument>ElasticInference</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.elasticache" class="Aws\ElastiCache\ElastiCacheClient" lazy="true">
      <argument>ElastiCache</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.elasticbeanstalk" class="Aws\ElasticBeanstalk\ElasticBeanstalkClient" lazy="true">
      <argument>ElasticBeanstalk</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.efs" class="Aws\Efs\EfsClient" lazy="true">
      <argument>Efs</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.elasticloadbalancing" class="Aws\ElasticLoadBalancing\ElasticLoadBalancingClient" lazy="true">
      <argument>ElasticLoadBalancing</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.elasticloadbalancingv2" class="Aws\ElasticLoadBalancingV2\ElasticLoadBalancingV2Client" lazy="true">
      <argument>ElasticLoadBalancingV2</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.emr" class="Aws\Emr\EmrClient" lazy="true">
      <argument>Emr</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.elastictranscoder" class="Aws\ElasticTranscoder\ElasticTranscoderClient" lazy="true">
      <argument>ElasticTranscoder</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ses" class="Aws\Ses\SesClient" lazy="true">
      <argument>Ses</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.emrcontainers" class="Aws\EMRContainers\EMRContainersClient" lazy="true">
      <argument>EMRContainers</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.emrserverless" class="Aws\EMRServerless\EMRServerlessClient" lazy="true">
      <argument>EMRServerless</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.marketplaceentitlementservice" class="Aws\MarketplaceEntitlementService\MarketplaceEntitlementServiceClient" lazy="true">
      <argument>MarketplaceEntitlementService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.entityresolution" class="Aws\EntityResolution\EntityResolutionClient" lazy="true">
      <argument>EntityResolution</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.elasticsearchservice" class="Aws\ElasticsearchService\ElasticsearchServiceClient" lazy="true">
      <argument>ElasticsearchService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.eventbridge" class="Aws\EventBridge\EventBridgeClient" lazy="true">
      <argument>EventBridge</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cloudwatchevents" class="Aws\CloudWatchEvents\CloudWatchEventsClient" lazy="true">
      <argument>CloudWatchEvents</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cloudwatchevidently" class="Aws\CloudWatchEvidently\CloudWatchEvidentlyClient" lazy="true">
      <argument>CloudWatchEvidently</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.finspacedata" class="Aws\FinSpaceData\FinSpaceDataClient" lazy="true">
      <argument>FinSpaceData</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.finspace" class="Aws\finspace\finspaceClient" lazy="true">
      <argument>finspace</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.firehose" class="Aws\Firehose\FirehoseClient" lazy="true">
      <argument>Firehose</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.fis" class="Aws\FIS\FISClient" lazy="true">
      <argument>FIS</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.fms" class="Aws\FMS\FMSClient" lazy="true">
      <argument>FMS</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.forecastservice" class="Aws\ForecastService\ForecastServiceClient" lazy="true">
      <argument>ForecastService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.forecastqueryservice" class="Aws\ForecastQueryService\ForecastQueryServiceClient" lazy="true">
      <argument>ForecastQueryService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.frauddetector" class="Aws\FraudDetector\FraudDetectorClient" lazy="true">
      <argument>FraudDetector</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.freetier" class="Aws\FreeTier\FreeTierClient" lazy="true">
      <argument>FreeTier</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.fsx" class="Aws\FSx\FSxClient" lazy="true">
      <argument>FSx</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.gamelift" class="Aws\GameLift\GameLiftClient" lazy="true">
      <argument>GameLift</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.glacier" class="Aws\Glacier\GlacierClient" lazy="true">
      <argument>Glacier</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.globalaccelerator" class="Aws\GlobalAccelerator\GlobalAcceleratorClient" lazy="true">
      <argument>GlobalAccelerator</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.glue" class="Aws\Glue\GlueClient" lazy="true">
      <argument>Glue</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.managedgrafana" class="Aws\ManagedGrafana\ManagedGrafanaClient" lazy="true">
      <argument>ManagedGrafana</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.greengrass" class="Aws\Greengrass\GreengrassClient" lazy="true">
      <argument>Greengrass</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.greengrassv2" class="Aws\GreengrassV2\GreengrassV2Client" lazy="true">
      <argument>GreengrassV2</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.groundstation" class="Aws\GroundStation\GroundStationClient" lazy="true">
      <argument>GroundStation</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.guardduty" class="Aws\GuardDuty\GuardDutyClient" lazy="true">
      <argument>GuardDuty</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.health" class="Aws\Health\HealthClient" lazy="true">
      <argument>Health</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.healthlake" class="Aws\HealthLake\HealthLakeClient" lazy="true">
      <argument>HealthLake</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.honeycode" class="Aws\Honeycode\HoneycodeClient" lazy="true">
      <argument>Honeycode</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.iam" class="Aws\Iam\IamClient" lazy="true">
      <argument>Iam</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.identitystore" class="Aws\IdentityStore\IdentityStoreClient" lazy="true">
      <argument>IdentityStore</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.imagebuilder" class="Aws\imagebuilder\imagebuilderClient" lazy="true">
      <argument>imagebuilder</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.importexport" class="Aws\ImportExport\ImportExportClient" lazy="true">
      <argument>ImportExport</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.inspectorscan" class="Aws\InspectorScan\InspectorScanClient" lazy="true">
      <argument>InspectorScan</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.inspector" class="Aws\Inspector\InspectorClient" lazy="true">
      <argument>Inspector</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.inspector2" class="Aws\Inspector2\Inspector2Client" lazy="true">
      <argument>Inspector2</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.internetmonitor" class="Aws\InternetMonitor\InternetMonitorClient" lazy="true">
      <argument>InternetMonitor</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.iotjobsdataplane" class="Aws\IoTJobsDataPlane\IoTJobsDataPlaneClient" lazy="true">
      <argument>IoTJobsDataPlane</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.iot" class="Aws\Iot\IotClient" lazy="true">
      <argument>Iot</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.iot1clickdevicesservice" class="Aws\IoT1ClickDevicesService\IoT1ClickDevicesServiceClient" lazy="true">
      <argument>IoT1ClickDevicesService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.iot1clickprojects" class="Aws\IoT1ClickProjects\IoT1ClickProjectsClient" lazy="true">
      <argument>IoT1ClickProjects</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.iotanalytics" class="Aws\IoTAnalytics\IoTAnalyticsClient" lazy="true">
      <argument>IoTAnalytics</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.iotdeviceadvisor" class="Aws\IoTDeviceAdvisor\IoTDeviceAdvisorClient" lazy="true">
      <argument>IoTDeviceAdvisor</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ioteventsdata" class="Aws\IoTEventsData\IoTEventsDataClient" lazy="true">
      <argument>IoTEventsData</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.iotevents" class="Aws\IoTEvents\IoTEventsClient" lazy="true">
      <argument>IoTEvents</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.iotfleethub" class="Aws\IoTFleetHub\IoTFleetHubClient" lazy="true">
      <argument>IoTFleetHub</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.iotfleetwise" class="Aws\IoTFleetWise\IoTFleetWiseClient" lazy="true">
      <argument>IoTFleetWise</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.iotsecuretunneling" class="Aws\IoTSecureTunneling\IoTSecureTunnelingClient" lazy="true">
      <argument>IoTSecureTunneling</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.iotsitewise" class="Aws\IoTSiteWise\IoTSiteWiseClient" lazy="true">
      <argument>IoTSiteWise</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.iotthingsgraph" class="Aws\IoTThingsGraph\IoTThingsGraphClient" lazy="true">
      <argument>IoTThingsGraph</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.iottwinmaker" class="Aws\IoTTwinMaker\IoTTwinMakerClient" lazy="true">
      <argument>IoTTwinMaker</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.iotwireless" class="Aws\IoTWireless\IoTWirelessClient" lazy="true">
      <argument>IoTWireless</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ivsrealtime" class="Aws\IVSRealTime\IVSRealTimeClient" lazy="true">
      <argument>IVSRealTime</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ivs" class="Aws\IVS\IVSClient" lazy="true">
      <argument>IVS</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ivschat" class="Aws\ivschat\ivschatClient" lazy="true">
      <argument>ivschat</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.kafka" class="Aws\Kafka\KafkaClient" lazy="true">
      <argument>Kafka</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.kafkaconnect" class="Aws\KafkaConnect\KafkaConnectClient" lazy="true">
      <argument>KafkaConnect</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.kendraranking" class="Aws\KendraRanking\KendraRankingClient" lazy="true">
      <argument>KendraRanking</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.kendra" class="Aws\kendra\kendraClient" lazy="true">
      <argument>kendra</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.keyspaces" class="Aws\Keyspaces\KeyspacesClient" lazy="true">
      <argument>Keyspaces</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.kinesisvideoarchivedmedia" class="Aws\KinesisVideoArchivedMedia\KinesisVideoArchivedMediaClient" lazy="true">
      <argument>KinesisVideoArchivedMedia</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.kinesisvideomedia" class="Aws\KinesisVideoMedia\KinesisVideoMediaClient" lazy="true">
      <argument>KinesisVideoMedia</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.kinesisvideosignalingchannels" class="Aws\KinesisVideoSignalingChannels\KinesisVideoSignalingChannelsClient" lazy="true">
      <argument>KinesisVideoSignalingChannels</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.kinesisvideowebrtcstorage" class="Aws\KinesisVideoWebRTCStorage\KinesisVideoWebRTCStorageClient" lazy="true">
      <argument>KinesisVideoWebRTCStorage</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.kinesis" class="Aws\Kinesis\KinesisClient" lazy="true">
      <argument>Kinesis</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.kinesisanalytics" class="Aws\KinesisAnalytics\KinesisAnalyticsClient" lazy="true">
      <argument>KinesisAnalytics</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.kinesisanalyticsv2" class="Aws\KinesisAnalyticsV2\KinesisAnalyticsV2Client" lazy="true">
      <argument>KinesisAnalyticsV2</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.kinesisvideo" class="Aws\KinesisVideo\KinesisVideoClient" lazy="true">
      <argument>KinesisVideo</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.kms" class="Aws\Kms\KmsClient" lazy="true">
      <argument>Kms</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.lakeformation" class="Aws\LakeFormation\LakeFormationClient" lazy="true">
      <argument>LakeFormation</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.lambda" class="Aws\Lambda\LambdaClient" lazy="true">
      <argument>Lambda</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.launchwizard" class="Aws\LaunchWizard\LaunchWizardClient" lazy="true">
      <argument>LaunchWizard</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.lexmodelbuildingservice" class="Aws\LexModelBuildingService\LexModelBuildingServiceClient" lazy="true">
      <argument>LexModelBuildingService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.licensemanagerlinuxsubscriptions" class="Aws\LicenseManagerLinuxSubscriptions\LicenseManagerLinuxSubscriptionsClient" lazy="true">
      <argument>LicenseManagerLinuxSubscriptions</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.licensemanagerusersubscriptions" class="Aws\LicenseManagerUserSubscriptions\LicenseManagerUserSubscriptionsClient" lazy="true">
      <argument>LicenseManagerUserSubscriptions</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.licensemanager" class="Aws\LicenseManager\LicenseManagerClient" lazy="true">
      <argument>LicenseManager</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.lightsail" class="Aws\Lightsail\LightsailClient" lazy="true">
      <argument>Lightsail</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.locationservice" class="Aws\LocationService\LocationServiceClient" lazy="true">
      <argument>LocationService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cloudwatchlogs" class="Aws\CloudWatchLogs\CloudWatchLogsClient" lazy="true">
      <argument>CloudWatchLogs</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.lookoutequipment" class="Aws\LookoutEquipment\LookoutEquipmentClient" lazy="true">
      <argument>LookoutEquipment</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.lookoutmetrics" class="Aws\LookoutMetrics\LookoutMetricsClient" lazy="true">
      <argument>LookoutMetrics</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.lookoutforvision" class="Aws\LookoutforVision\LookoutforVisionClient" lazy="true">
      <argument>LookoutforVision</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.mainframemodernization" class="Aws\MainframeModernization\MainframeModernizationClient" lazy="true">
      <argument>MainframeModernization</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.machinelearning" class="Aws\MachineLearning\MachineLearningClient" lazy="true">
      <argument>MachineLearning</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.macie2" class="Aws\Macie2\Macie2Client" lazy="true">
      <argument>Macie2</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.managedblockchainquery" class="Aws\ManagedBlockchainQuery\ManagedBlockchainQueryClient" lazy="true">
      <argument>ManagedBlockchainQuery</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.managedblockchain" class="Aws\ManagedBlockchain\ManagedBlockchainClient" lazy="true">
      <argument>ManagedBlockchain</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.marketplaceagreement" class="Aws\MarketplaceAgreement\MarketplaceAgreementClient" lazy="true">
      <argument>MarketplaceAgreement</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.marketplacecatalog" class="Aws\MarketplaceCatalog\MarketplaceCatalogClient" lazy="true">
      <argument>MarketplaceCatalog</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.marketplacedeployment" class="Aws\MarketplaceDeployment\MarketplaceDeploymentClient" lazy="true">
      <argument>MarketplaceDeployment</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.marketplacecommerceanalytics" class="Aws\MarketplaceCommerceAnalytics\MarketplaceCommerceAnalyticsClient" lazy="true">
      <argument>MarketplaceCommerceAnalytics</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.mediaconnect" class="Aws\MediaConnect\MediaConnectClient" lazy="true">
      <argument>MediaConnect</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.mediaconvert" class="Aws\MediaConvert\MediaConvertClient" lazy="true">
      <argument>MediaConvert</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.medialive" class="Aws\MediaLive\MediaLiveClient" lazy="true">
      <argument>MediaLive</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.mediapackagevod" class="Aws\MediaPackageVod\MediaPackageVodClient" lazy="true">
      <argument>MediaPackageVod</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.mediapackage" class="Aws\MediaPackage\MediaPackageClient" lazy="true">
      <argument>MediaPackage</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.mediapackagev2" class="Aws\MediaPackageV2\MediaPackageV2Client" lazy="true">
      <argument>MediaPackageV2</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.mediastoredata" class="Aws\MediaStoreData\MediaStoreDataClient" lazy="true">
      <argument>MediaStoreData</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.mediastore" class="Aws\MediaStore\MediaStoreClient" lazy="true">
      <argument>MediaStore</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.mediatailor" class="Aws\MediaTailor\MediaTailorClient" lazy="true">
      <argument>MediaTailor</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.medicalimaging" class="Aws\MedicalImaging\MedicalImagingClient" lazy="true">
      <argument>MedicalImaging</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.memorydb" class="Aws\MemoryDB\MemoryDBClient" lazy="true">
      <argument>MemoryDB</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.marketplacemetering" class="Aws\MarketplaceMetering\MarketplaceMeteringClient" lazy="true">
      <argument>MarketplaceMetering</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.migrationhub" class="Aws\MigrationHub\MigrationHubClient" lazy="true">
      <argument>MigrationHub</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.mgn" class="Aws\mgn\mgnClient" lazy="true">
      <argument>mgn</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.migrationhubrefactorspaces" class="Aws\MigrationHubRefactorSpaces\MigrationHubRefactorSpacesClient" lazy="true">
      <argument>MigrationHubRefactorSpaces</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.migrationhubconfig" class="Aws\MigrationHubConfig\MigrationHubConfigClient" lazy="true">
      <argument>MigrationHubConfig</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.migrationhuborchestrator" class="Aws\MigrationHubOrchestrator\MigrationHubOrchestratorClient" lazy="true">
      <argument>MigrationHubOrchestrator</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.migrationhubstrategyrecommendations" class="Aws\MigrationHubStrategyRecommendations\MigrationHubStrategyRecommendationsClient" lazy="true">
      <argument>MigrationHubStrategyRecommendations</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.mobile" class="Aws\Mobile\MobileClient" lazy="true">
      <argument>Mobile</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.lexmodelsv2" class="Aws\LexModelsV2\LexModelsV2Client" lazy="true">
      <argument>LexModelsV2</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cloudwatch" class="Aws\CloudWatch\CloudWatchClient" lazy="true">
      <argument>CloudWatch</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.mq" class="Aws\MQ\MQClient" lazy="true">
      <argument>MQ</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.mturk" class="Aws\MTurk\MTurkClient" lazy="true">
      <argument>MTurk</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.mwaa" class="Aws\MWAA\MWAAClient" lazy="true">
      <argument>MWAA</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.neptunegraph" class="Aws\NeptuneGraph\NeptuneGraphClient" lazy="true">
      <argument>NeptuneGraph</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.neptune" class="Aws\Neptune\NeptuneClient" lazy="true">
      <argument>Neptune</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.neptunedata" class="Aws\Neptunedata\NeptunedataClient" lazy="true">
      <argument>Neptunedata</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.networkfirewall" class="Aws\NetworkFirewall\NetworkFirewallClient" lazy="true">
      <argument>NetworkFirewall</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.networkmanager" class="Aws\NetworkManager\NetworkManagerClient" lazy="true">
      <argument>NetworkManager</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.networkmonitor" class="Aws\NetworkMonitor\NetworkMonitorClient" lazy="true">
      <argument>NetworkMonitor</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.nimblestudio" class="Aws\NimbleStudio\NimbleStudioClient" lazy="true">
      <argument>NimbleStudio</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.oam" class="Aws\OAM\OAMClient" lazy="true">
      <argument>OAM</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.omics" class="Aws\Omics\OmicsClient" lazy="true">
      <argument>Omics</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.opensearchservice" class="Aws\OpenSearchService\OpenSearchServiceClient" lazy="true">
      <argument>OpenSearchService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.opensearchserverless" class="Aws\OpenSearchServerless\OpenSearchServerlessClient" lazy="true">
      <argument>OpenSearchServerless</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.opsworks" class="Aws\OpsWorks\OpsWorksClient" lazy="true">
      <argument>OpsWorks</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.opsworkscm" class="Aws\OpsWorksCM\OpsWorksCMClient" lazy="true">
      <argument>OpsWorksCM</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.organizations" class="Aws\Organizations\OrganizationsClient" lazy="true">
      <argument>Organizations</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.osis" class="Aws\OSIS\OSISClient" lazy="true">
      <argument>OSIS</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.outposts" class="Aws\Outposts\OutpostsClient" lazy="true">
      <argument>Outposts</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.panorama" class="Aws\Panorama\PanoramaClient" lazy="true">
      <argument>Panorama</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.paymentcryptographydata" class="Aws\PaymentCryptographyData\PaymentCryptographyDataClient" lazy="true">
      <argument>PaymentCryptographyData</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.paymentcryptography" class="Aws\PaymentCryptography\PaymentCryptographyClient" lazy="true">
      <argument>PaymentCryptography</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.pcaconnectorad" class="Aws\PcaConnectorAd\PcaConnectorAdClient" lazy="true">
      <argument>PcaConnectorAd</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.personalizeevents" class="Aws\PersonalizeEvents\PersonalizeEventsClient" lazy="true">
      <argument>PersonalizeEvents</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.personalizeruntime" class="Aws\PersonalizeRuntime\PersonalizeRuntimeClient" lazy="true">
      <argument>PersonalizeRuntime</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.personalize" class="Aws\Personalize\PersonalizeClient" lazy="true">
      <argument>Personalize</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.pi" class="Aws\PI\PIClient" lazy="true">
      <argument>PI</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.pinpointemail" class="Aws\PinpointEmail\PinpointEmailClient" lazy="true">
      <argument>PinpointEmail</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.pinpointsmsvoicev2" class="Aws\PinpointSMSVoiceV2\PinpointSMSVoiceV2Client" lazy="true">
      <argument>PinpointSMSVoiceV2</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.pinpoint" class="Aws\Pinpoint\PinpointClient" lazy="true">
      <argument>Pinpoint</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.pipes" class="Aws\Pipes\PipesClient" lazy="true">
      <argument>Pipes</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.polly" class="Aws\Polly\PollyClient" lazy="true">
      <argument>Polly</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.pricing" class="Aws\Pricing\PricingClient" lazy="true">
      <argument>Pricing</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.privatenetworks" class="Aws\PrivateNetworks\PrivateNetworksClient" lazy="true">
      <argument>PrivateNetworks</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.proton" class="Aws\Proton\ProtonClient" lazy="true">
      <argument>Proton</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.qbusiness" class="Aws\QBusiness\QBusinessClient" lazy="true">
      <argument>QBusiness</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.qconnect" class="Aws\QConnect\QConnectClient" lazy="true">
      <argument>QConnect</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.qldbsession" class="Aws\QLDBSession\QLDBSessionClient" lazy="true">
      <argument>QLDBSession</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.qldb" class="Aws\QLDB\QLDBClient" lazy="true">
      <argument>QLDB</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.quicksight" class="Aws\QuickSight\QuickSightClient" lazy="true">
      <argument>QuickSight</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ram" class="Aws\RAM\RAMClient" lazy="true">
      <argument>RAM</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.recyclebin" class="Aws\RecycleBin\RecycleBinClient" lazy="true">
      <argument>RecycleBin</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.rdsdataservice" class="Aws\RDSDataService\RDSDataServiceClient" lazy="true">
      <argument>RDSDataService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.rds" class="Aws\Rds\RdsClient" lazy="true">
      <argument>Rds</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.redshiftdataapiservice" class="Aws\RedshiftDataAPIService\RedshiftDataAPIServiceClient" lazy="true">
      <argument>RedshiftDataAPIService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.redshiftserverless" class="Aws\RedshiftServerless\RedshiftServerlessClient" lazy="true">
      <argument>RedshiftServerless</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.redshift" class="Aws\Redshift\RedshiftClient" lazy="true">
      <argument>Redshift</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.rekognition" class="Aws\Rekognition\RekognitionClient" lazy="true">
      <argument>Rekognition</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.repostspace" class="Aws\Repostspace\RepostspaceClient" lazy="true">
      <argument>Repostspace</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.resiliencehub" class="Aws\ResilienceHub\ResilienceHubClient" lazy="true">
      <argument>ResilienceHub</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.resourceexplorer2" class="Aws\ResourceExplorer2\ResourceExplorer2Client" lazy="true">
      <argument>ResourceExplorer2</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.resourcegroups" class="Aws\ResourceGroups\ResourceGroupsClient" lazy="true">
      <argument>ResourceGroups</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.resourcegroupstaggingapi" class="Aws\ResourceGroupsTaggingAPI\ResourceGroupsTaggingAPIClient" lazy="true">
      <argument>ResourceGroupsTaggingAPI</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.robomaker" class="Aws\RoboMaker\RoboMakerClient" lazy="true">
      <argument>RoboMaker</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.rolesanywhere" class="Aws\RolesAnywhere\RolesAnywhereClient" lazy="true">
      <argument>RolesAnywhere</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.route53recoverycluster" class="Aws\Route53RecoveryCluster\Route53RecoveryClusterClient" lazy="true">
      <argument>Route53RecoveryCluster</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.route53recoverycontrolconfig" class="Aws\Route53RecoveryControlConfig\Route53RecoveryControlConfigClient" lazy="true">
      <argument>Route53RecoveryControlConfig</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.route53recoveryreadiness" class="Aws\Route53RecoveryReadiness\Route53RecoveryReadinessClient" lazy="true">
      <argument>Route53RecoveryReadiness</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.route53" class="Aws\Route53\Route53Client" lazy="true">
      <argument>Route53</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.route53domains" class="Aws\Route53Domains\Route53DomainsClient" lazy="true">
      <argument>Route53Domains</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.route53resolver" class="Aws\Route53Resolver\Route53ResolverClient" lazy="true">
      <argument>Route53Resolver</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.cloudwatchrum" class="Aws\CloudWatchRUM\CloudWatchRUMClient" lazy="true">
      <argument>CloudWatchRUM</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.lexruntimev2" class="Aws\LexRuntimeV2\LexRuntimeV2Client" lazy="true">
      <argument>LexRuntimeV2</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.lexruntimeservice" class="Aws\LexRuntimeService\LexRuntimeServiceClient" lazy="true">
      <argument>LexRuntimeService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.sagemakerruntime" class="Aws\SageMakerRuntime\SageMakerRuntimeClient" lazy="true">
      <argument>SageMakerRuntime</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.s3" class="Aws\S3\S3Client" lazy="true">
      <argument>S3</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.s3control" class="Aws\S3Control\S3ControlClient" lazy="true">
      <argument>S3Control</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.s3outposts" class="Aws\S3Outposts\S3OutpostsClient" lazy="true">
      <argument>S3Outposts</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.augmentedairuntime" class="Aws\AugmentedAIRuntime\AugmentedAIRuntimeClient" lazy="true">
      <argument>AugmentedAIRuntime</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.sagemakeredgemanager" class="Aws\SagemakerEdgeManager\SagemakerEdgeManagerClient" lazy="true">
      <argument>SagemakerEdgeManager</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.sagemakerfeaturestoreruntime" class="Aws\SageMakerFeatureStoreRuntime\SageMakerFeatureStoreRuntimeClient" lazy="true">
      <argument>SageMakerFeatureStoreRuntime</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.sagemakergeospatial" class="Aws\SageMakerGeospatial\SageMakerGeospatialClient" lazy="true">
      <argument>SageMakerGeospatial</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.sagemakermetrics" class="Aws\SageMakerMetrics\SageMakerMetricsClient" lazy="true">
      <argument>SageMakerMetrics</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.sagemaker" class="Aws\SageMaker\SageMakerClient" lazy="true">
      <argument>SageMaker</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.savingsplans" class="Aws\SavingsPlans\SavingsPlansClient" lazy="true">
      <argument>SavingsPlans</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.scheduler" class="Aws\Scheduler\SchedulerClient" lazy="true">
      <argument>Scheduler</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.schemas" class="Aws\Schemas\SchemasClient" lazy="true">
      <argument>Schemas</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.secretsmanager" class="Aws\SecretsManager\SecretsManagerClient" lazy="true">
      <argument>SecretsManager</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.securityhub" class="Aws\SecurityHub\SecurityHubClient" lazy="true">
      <argument>SecurityHub</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.securitylake" class="Aws\SecurityLake\SecurityLakeClient" lazy="true">
      <argument>SecurityLake</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.serverlessapplicationrepository" class="Aws\ServerlessApplicationRepository\ServerlessApplicationRepositoryClient" lazy="true">
      <argument>ServerlessApplicationRepository</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.servicequotas" class="Aws\ServiceQuotas\ServiceQuotasClient" lazy="true">
      <argument>ServiceQuotas</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.appregistry" class="Aws\AppRegistry\AppRegistryClient" lazy="true">
      <argument>AppRegistry</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.servicecatalog" class="Aws\ServiceCatalog\ServiceCatalogClient" lazy="true">
      <argument>ServiceCatalog</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.servicediscovery" class="Aws\ServiceDiscovery\ServiceDiscoveryClient" lazy="true">
      <argument>ServiceDiscovery</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.sesv2" class="Aws\SesV2\SesV2Client" lazy="true">
      <argument>SesV2</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.shield" class="Aws\Shield\ShieldClient" lazy="true">
      <argument>Shield</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.signer" class="Aws\signer\signerClient" lazy="true">
      <argument>signer</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.simspaceweaver" class="Aws\SimSpaceWeaver\SimSpaceWeaverClient" lazy="true">
      <argument>SimSpaceWeaver</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.pinpointsmsvoice" class="Aws\PinpointSMSVoice\PinpointSMSVoiceClient" lazy="true">
      <argument>PinpointSMSVoice</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.sms" class="Aws\Sms\SmsClient" lazy="true">
      <argument>Sms</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.snowdevicemanagement" class="Aws\SnowDeviceManagement\SnowDeviceManagementClient" lazy="true">
      <argument>SnowDeviceManagement</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.snowball" class="Aws\SnowBall\SnowBallClient" lazy="true">
      <argument>SnowBall</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.sns" class="Aws\Sns\SnsClient" lazy="true">
      <argument>Sns</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.sqs" class="Aws\Sqs\SqsClient" lazy="true">
      <argument>Sqs</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ssmcontacts" class="Aws\SSMContacts\SSMContactsClient" lazy="true">
      <argument>SSMContacts</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ssmincidents" class="Aws\SSMIncidents\SSMIncidentsClient" lazy="true">
      <argument>SSMIncidents</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ssmsap" class="Aws\SsmSap\SsmSapClient" lazy="true">
      <argument>SsmSap</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ssm" class="Aws\Ssm\SsmClient" lazy="true">
      <argument>Ssm</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ssoadmin" class="Aws\SSOAdmin\SSOAdminClient" lazy="true">
      <argument>SSOAdmin</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.ssooidc" class="Aws\SSOOIDC\SSOOIDCClient" lazy="true">
      <argument>SSOOIDC</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.sso" class="Aws\SSO\SSOClient" lazy="true">
      <argument>SSO</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.sfn" class="Aws\Sfn\SfnClient" lazy="true">
      <argument>Sfn</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.storagegateway" class="Aws\StorageGateway\StorageGatewayClient" lazy="true">
      <argument>StorageGateway</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.dynamodbstreams" class="Aws\DynamoDbStreams\DynamoDbStreamsClient" lazy="true">
      <argument>DynamoDbStreams</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.sts" class="Aws\Sts\StsClient" lazy="true">
      <argument>Sts</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.supplychain" class="Aws\SupplyChain\SupplyChainClient" lazy="true">
      <argument>SupplyChain</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.supportapp" class="Aws\SupportApp\SupportAppClient" lazy="true">
      <argument>SupportApp</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.support" class="Aws\Support\SupportClient" lazy="true">
      <argument>Support</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.swf" class="Aws\Swf\SwfClient" lazy="true">
      <argument>Swf</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.synthetics" class="Aws\Synthetics\SyntheticsClient" lazy="true">
      <argument>Synthetics</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.textract" class="Aws\Textract\TextractClient" lazy="true">
      <argument>Textract</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.timestreaminfluxdb" class="Aws\TimestreamInfluxDB\TimestreamInfluxDBClient" lazy="true">
      <argument>TimestreamInfluxDB</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.timestreamquery" class="Aws\TimestreamQuery\TimestreamQueryClient" lazy="true">
      <argument>TimestreamQuery</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.timestreamwrite" class="Aws\TimestreamWrite\TimestreamWriteClient" lazy="true">
      <argument>TimestreamWrite</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.tnb" class="Aws\Tnb\TnbClient" lazy="true">
      <argument>Tnb</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.transcribeservice" class="Aws\TranscribeService\TranscribeServiceClient" lazy="true">
      <argument>TranscribeService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.transfer" class="Aws\Transfer\TransferClient" lazy="true">
      <argument>Transfer</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.translate" class="Aws\Translate\TranslateClient" lazy="true">
      <argument>Translate</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.trustedadvisor" class="Aws\TrustedAdvisor\TrustedAdvisorClient" lazy="true">
      <argument>TrustedAdvisor</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.verifiedpermissions" class="Aws\VerifiedPermissions\VerifiedPermissionsClient" lazy="true">
      <argument>VerifiedPermissions</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.voiceid" class="Aws\VoiceID\VoiceIDClient" lazy="true">
      <argument>VoiceID</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.vpclattice" class="Aws\VPCLattice\VPCLatticeClient" lazy="true">
      <argument>VPCLattice</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.wafregional" class="Aws\WafRegional\WafRegionalClient" lazy="true">
      <argument>WafRegional</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.waf" class="Aws\Waf\WafClient" lazy="true">
      <argument>Waf</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.wafv2" class="Aws\WAFV2\WAFV2Client" lazy="true">
      <argument>WAFV2</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.wellarchitected" class="Aws\WellArchitected\WellArchitectedClient" lazy="true">
      <argument>WellArchitected</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.connectwisdomservice" class="Aws\ConnectWisdomService\ConnectWisdomServiceClient" lazy="true">
      <argument>ConnectWisdomService</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.workdocs" class="Aws\WorkDocs\WorkDocsClient" lazy="true">
      <argument>WorkDocs</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.worklink" class="Aws\WorkLink\WorkLinkClient" lazy="true">
      <argument>WorkLink</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.workmail" class="Aws\WorkMail\WorkMailClient" lazy="true">
      <argument>WorkMail</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.workmailmessageflow" class="Aws\WorkMailMessageFlow\WorkMailMessageFlowClient" lazy="true">
      <argument>WorkMailMessageFlow</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.workspacesthinclient" class="Aws\WorkSpacesThinClient\WorkSpacesThinClientClient" lazy="true">
      <argument>WorkSpacesThinClient</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.workspacesweb" class="Aws\WorkSpacesWeb\WorkSpacesWebClient" lazy="true">
      <argument>WorkSpacesWeb</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.workspaces" class="Aws\WorkSpaces\WorkSpacesClient" lazy="true">
      <argument>WorkSpaces</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id="aws.xray" class="Aws\XRay\XRayClient" lazy="true">
      <argument>XRay</argument>
      <factory service="aws_sdk" method="createClient"/>
    </service>
    <service id=".instanceof.Symfony\Contracts\Service\ServiceSubscriberInterface.0.App\Controller\PdfController" class="App\Controller\PdfController" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Controller\PdfController" class="App\Controller\PdfController" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Controller\PdfController" class="App\Controller\PdfController" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".service_locator.w7.f4fT" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="base64" type="service_closure" id="container.env_var_processor"/>
        <argument key="bool" type="service_closure" id="container.env_var_processor"/>
        <argument key="const" type="service_closure" id="container.env_var_processor"/>
        <argument key="csv" type="service_closure" id="container.env_var_processor"/>
        <argument key="default" type="service_closure" id="container.env_var_processor"/>
        <argument key="defined" type="service_closure" id="container.env_var_processor"/>
        <argument key="enum" type="service_closure" id="container.env_var_processor"/>
        <argument key="file" type="service_closure" id="container.env_var_processor"/>
        <argument key="float" type="service_closure" id="container.env_var_processor"/>
        <argument key="int" type="service_closure" id="container.env_var_processor"/>
        <argument key="json" type="service_closure" id="container.env_var_processor"/>
        <argument key="key" type="service_closure" id="container.env_var_processor"/>
        <argument key="not" type="service_closure" id="container.env_var_processor"/>
        <argument key="query_string" type="service_closure" id="container.env_var_processor"/>
        <argument key="require" type="service_closure" id="container.env_var_processor"/>
        <argument key="resolve" type="service_closure" id="container.env_var_processor"/>
        <argument key="shuffle" type="service_closure" id="container.env_var_processor"/>
        <argument key="string" type="service_closure" id="container.env_var_processor"/>
        <argument key="trim" type="service_closure" id="container.env_var_processor"/>
        <argument key="url" type="service_closure" id="container.env_var_processor"/>
      </argument>
    </service>
    <service id="maker.auto_command.make_auth" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:auth" description="Create a Guard authenticator of different flavors"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_authenticator"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:auth</argument>
      </call>
      <call method="setDescription">
        <argument>Create a Guard authenticator of different flavors</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_command" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:command" description="Create a new console command class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:command</argument>
      </call>
      <call method="setDescription">
        <argument>Create a new console command class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_twig_component" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:twig-component" description="Create a twig (or live) component"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_twig_component"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:twig-component</argument>
      </call>
      <call method="setDescription">
        <argument>Create a twig (or live) component</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_controller" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:controller" description="Create a new controller class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_controller"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:controller</argument>
      </call>
      <call method="setDescription">
        <argument>Create a new controller class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_crud" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:crud" description="Create CRUD for Doctrine entity class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_crud"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:crud</argument>
      </call>
      <call method="setDescription">
        <argument>Create CRUD for Doctrine entity class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_docker_database" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:docker:database" description="Add a database container to your compose.yaml file"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_docker_database"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:docker:database</argument>
      </call>
      <call method="setDescription">
        <argument>Add a database container to your compose.yaml file</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_entity" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:entity" description="Create or update a Doctrine entity class, and optionally an API Platform resource"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_entity"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:entity</argument>
      </call>
      <call method="setDescription">
        <argument>Create or update a Doctrine entity class, and optionally an API Platform resource</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_fixtures" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:fixtures" description="Create a new class to load Doctrine fixtures"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_fixtures"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:fixtures</argument>
      </call>
      <call method="setDescription">
        <argument>Create a new class to load Doctrine fixtures</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_form" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:form" description="Create a new form class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_form"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:form</argument>
      </call>
      <call method="setDescription">
        <argument>Create a new form class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_listener" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:listener" description="Creates a new event subscriber class or a new event listener class"/>
      <tag name="console.command" command="make:subscriber" description="Deprecated alias of &quot;make:listener&quot;"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_listener"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:listener</argument>
      </call>
      <call method="setAliases">
        <argument type="collection">
          <argument>make:subscriber</argument>
        </argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new event subscriber class or a new event listener class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_message" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:message" description="Create a new message and handler"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_message"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:message</argument>
      </call>
      <call method="setDescription">
        <argument>Create a new message and handler</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_messenger_middleware" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:messenger-middleware" description="Create a new messenger middleware"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_messenger_middleware"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:messenger-middleware</argument>
      </call>
      <call method="setDescription">
        <argument>Create a new messenger middleware</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_registration_form" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:registration-form" description="Create a new registration form system"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_registration_form"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:registration-form</argument>
      </call>
      <call method="setDescription">
        <argument>Create a new registration form system</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_reset_password" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:reset-password" description="Create controller, entity, and repositories for use with symfonycasts/reset-password-bundle"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_reset_password"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:reset-password</argument>
      </call>
      <call method="setDescription">
        <argument>Create controller, entity, and repositories for use with symfonycasts/reset-password-bundle</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_serializer_encoder" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:serializer:encoder" description="Create a new serializer encoder class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_serializer_encoder"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:serializer:encoder</argument>
      </call>
      <call method="setDescription">
        <argument>Create a new serializer encoder class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_serializer_normalizer" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:serializer:normalizer" description="Create a new serializer normalizer class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_serializer_normalizer"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:serializer:normalizer</argument>
      </call>
      <call method="setDescription">
        <argument>Create a new serializer normalizer class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_twig_extension" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:twig-extension" description="Create a new Twig extension with its runtime class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_twig_extension"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:twig-extension</argument>
      </call>
      <call method="setDescription">
        <argument>Create a new Twig extension with its runtime class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_test" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:test" description="Create a new test class"/>
      <tag name="console.command" command="make:unit-test" description="Deprecated alias of &quot;make:test&quot;"/>
      <tag name="console.command" command="make:functional-test" description="Deprecated alias of &quot;make:test&quot;"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_test"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:test</argument>
      </call>
      <call method="setAliases">
        <argument type="collection">
          <argument>make:unit-test</argument>
          <argument>make:functional-test</argument>
        </argument>
      </call>
      <call method="setDescription">
        <argument>Create a new test class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_validator" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:validator" description="Create a new validator and constraint class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_validator"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:validator</argument>
      </call>
      <call method="setDescription">
        <argument>Create a new validator and constraint class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_voter" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:voter" description="Create a new security voter class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_voter"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:voter</argument>
      </call>
      <call method="setDescription">
        <argument>Create a new security voter class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_user" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:user" description="Create a new security user class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_user"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:user</argument>
      </call>
      <call method="setDescription">
        <argument>Create a new security user class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_migration" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:migration" description="Create a new migration based on database changes"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_migration"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:migration</argument>
      </call>
      <call method="setDescription">
        <argument>Create a new migration based on database changes</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_stimulus_controller" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:stimulus-controller" description="Create a new Stimulus controller"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_stimulus_controller"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:stimulus-controller</argument>
      </call>
      <call method="setDescription">
        <argument>Create a new Stimulus controller</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_security_form_login" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:security:form-login" description="Generate the code needed for the form_login authenticator"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_form_login"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:security:form-login</argument>
      </call>
      <call method="setDescription">
        <argument>Generate the code needed for the form_login authenticator</argument>
      </call>
    </service>
    <service id=".service_locator.y4_Zrx." class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="loader" type="service_closure" id=".errored..service_locator.y4_Zrx..Symfony\Component\Config\Loader\LoaderInterface"/>
      </argument>
    </service>
    <service id=".service_locator.HBdvAhp" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="App\Kernel::loadRoutes" type="service_closure" id=".service_locator.y4_Zrx."/>
        <argument key="App\Kernel::registerContainerConfiguration" type="service_closure" id=".service_locator.y4_Zrx."/>
        <argument key="kernel::loadRoutes" type="service_closure" id=".service_locator.y4_Zrx."/>
        <argument key="kernel::registerContainerConfiguration" type="service_closure" id=".service_locator.y4_Zrx."/>
        <argument key="kernel:loadRoutes" type="service_closure" id=".service_locator.y4_Zrx."/>
        <argument key="kernel:registerContainerConfiguration" type="service_closure" id=".service_locator.y4_Zrx."/>
      </argument>
    </service>
    <service id=".service_locator.lLv4pWF" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="inline" type="service_closure" id="fragment.renderer.inline"/>
      </argument>
    </service>
    <service id=".service_locator.HJVVhIz" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="Symfony\Component\Form\Extension\Core\Type\ChoiceType" type="service_closure" id="form.type.choice"/>
        <argument key="Symfony\Component\Form\Extension\Core\Type\ColorType" type="service_closure" id="form.type.color"/>
        <argument key="Symfony\Component\Form\Extension\Core\Type\FileType" type="service_closure" id="form.type.file"/>
        <argument key="Symfony\Component\Form\Extension\Core\Type\FormType" type="service_closure" id="form.type.form"/>
      </argument>
    </service>
    <service id="logger" class="Symfony\Component\HttpKernel\Log\Logger">
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument type="service" id="request_stack"/>
      <argument>%env(bool:default::key:web:default:kernel.runtime_mode:)%</argument>
    </service>
    <service id=".service_locator.O2p6Lk7" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="form.factory" type="service_closure" id="form.factory" on-invalid="ignore"/>
        <argument key="http_kernel" type="service_closure" id="http_kernel" on-invalid="ignore"/>
        <argument key="parameter_bag" type="service_closure" id="parameter_bag" on-invalid="ignore"/>
        <argument key="request_stack" type="service_closure" id="request_stack" on-invalid="ignore"/>
        <argument key="router" type="service_closure" id="router.default" on-invalid="ignore"/>
      </argument>
    </service>
    <service id=".service_locator.O2p6Lk7.App\Controller\PdfController" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="App\Controller\PdfController"/>
      <argument>App\Controller\PdfController</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.O2p6Lk7" method="withContext"/>
    </service>
    <service id=".service_locator.PvoQzFT" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="routing.loader" type="service_closure" id="routing.loader"/>
      </argument>
    </service>
    <service id=".service_locator.PvoQzFT.router.default" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="router.default"/>
      <argument>router.default</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.PvoQzFT" method="withContext"/>
    </service>
    <service id=".service_locator.cUcW89y" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="router" type="service_closure" id="router.default"/>
      </argument>
    </service>
    <service id=".service_locator.cUcW89y.router.cache_warmer" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="router.cache_warmer"/>
      <argument>router.cache_warmer</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.cUcW89y" method="withContext"/>
    </service>
    <service id=".service_locator.3FMSrrH" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\BackedEnumValueResolver" type="service_closure" id="argument_resolver.backed_enum_resolver"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DateTimeValueResolver" type="service_closure" id="argument_resolver.datetime"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver" type="service_closure" id="argument_resolver.default"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\QueryParameterValueResolver" type="service_closure" id="argument_resolver.query_parameter_value_resolver"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver" type="service_closure" id="argument_resolver.request_attribute"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestPayloadValueResolver" type="service_closure" id="argument_resolver.request_payload"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver" type="service_closure" id="argument_resolver.request"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\ServiceValueResolver" type="service_closure" id="argument_resolver.service"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver" type="service_closure" id="argument_resolver.session"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver" type="service_closure" id="argument_resolver.variadic"/>
      </argument>
    </service>
    <service id=".service_locator.XXv1IfR" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="reverse_container" type="service_closure" id="reverse_container" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id=".service_locator.Xbsa8iG" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection"/>
    </service>
    <service id=".service_locator.NBUFN6A" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="cache.app" type="service_closure" id="cache.app.taggable"/>
      </argument>
    </service>
    <service id=".service_locator.9ETxUxh" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="event_dispatcher" type="service_closure" id="event_dispatcher"/>
      </argument>
    </service>
    <service id=".service_locator..6hZeC_" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="kernel" type="service_closure" id="kernel"/>
      </argument>
    </service>
    <service id=".service_locator.cXsfP3P" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="logger" type="service_closure" id="logger" on-invalid="ignore"/>
        <argument key="session_factory" type="service_closure" id="session.factory" on-invalid="ignore"/>
      </argument>
    </service>
    <service id=".errored..service_locator.y4_Zrx..Symfony\Component\Config\Loader\LoaderInterface" class="Symfony\Component\Config\Loader\LoaderInterface">
      <tag name="container.error" message="Cannot autowire service &quot;.service_locator.y4_Zrx.&quot;: it needs an instance of &quot;Symfony\Component\Config\Loader\LoaderInterface&quot; but this type has been excluded from autowiring."/>
    </service>
    <service id=".console.command.about.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>about</argument>
      <argument type="collection"/>
      <argument>Display information about the current project</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.about"/>
    </service>
    <service id=".console.command.assets_install.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>assets:install</argument>
      <argument type="collection"/>
      <argument>Install bundle's web assets under a public directory</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.assets_install"/>
    </service>
    <service id=".console.command.cache_clear.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:clear</argument>
      <argument type="collection"/>
      <argument>Clear the cache</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_clear"/>
    </service>
    <service id=".console.command.cache_pool_clear.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:pool:clear</argument>
      <argument type="collection"/>
      <argument>Clear cache pools</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_pool_clear"/>
    </service>
    <service id=".console.command.cache_pool_prune.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:pool:prune</argument>
      <argument type="collection"/>
      <argument>Prune cache pools</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_pool_prune"/>
    </service>
    <service id=".console.command.cache_pool_invalidate_tags.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:pool:invalidate-tags</argument>
      <argument type="collection"/>
      <argument>Invalidate cache tags for all or a specific pool</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_pool_invalidate_tags"/>
    </service>
    <service id=".console.command.cache_pool_delete.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:pool:delete</argument>
      <argument type="collection"/>
      <argument>Delete an item from a cache pool</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_pool_delete"/>
    </service>
    <service id=".console.command.cache_pool_list.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:pool:list</argument>
      <argument type="collection"/>
      <argument>List available cache pools</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_pool_list"/>
    </service>
    <service id=".console.command.cache_warmup.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:warmup</argument>
      <argument type="collection"/>
      <argument>Warm up an empty cache</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_warmup"/>
    </service>
    <service id=".console.command.config_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:config</argument>
      <argument type="collection"/>
      <argument>Dump the current configuration for an extension</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.config_debug"/>
    </service>
    <service id=".console.command.config_dump_reference.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>config:dump-reference</argument>
      <argument type="collection"/>
      <argument>Dump the default configuration for an extension</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.config_dump_reference"/>
    </service>
    <service id=".console.command.container_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:container</argument>
      <argument type="collection"/>
      <argument>Display current services for an application</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.container_debug"/>
    </service>
    <service id=".console.command.container_lint.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>lint:container</argument>
      <argument type="collection"/>
      <argument>Ensure that arguments injected into services match type declarations</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.container_lint"/>
    </service>
    <service id=".console.command.debug_autowiring.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:autowiring</argument>
      <argument type="collection"/>
      <argument>List classes/interfaces you can use for autowiring</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.debug_autowiring"/>
    </service>
    <service id=".console.command.dotenv_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:dotenv</argument>
      <argument type="collection"/>
      <argument>List all dotenv files with variables and values</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.dotenv_debug"/>
    </service>
    <service id=".console.command.event_dispatcher_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:event-dispatcher</argument>
      <argument type="collection"/>
      <argument>Display configured listeners for an application</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.event_dispatcher_debug"/>
    </service>
    <service id=".console.command.router_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:router</argument>
      <argument type="collection"/>
      <argument>Display current routes for an application</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.router_debug"/>
    </service>
    <service id=".console.command.router_match.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>router:match</argument>
      <argument type="collection"/>
      <argument>Help debug routes by simulating a path info match</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.router_match"/>
    </service>
    <service id=".console.command.yaml_lint.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>lint:yaml</argument>
      <argument type="collection"/>
      <argument>Lint a YAML file and outputs encountered errors</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.yaml_lint"/>
    </service>
    <service id=".console.command.form_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:form</argument>
      <argument type="collection"/>
      <argument>Display form type information</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.form_debug"/>
    </service>
    <service id=".console.command.secrets_set.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>secrets:set</argument>
      <argument type="collection"/>
      <argument>Set a secret in the vault</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.secrets_set"/>
    </service>
    <service id=".console.command.secrets_remove.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>secrets:remove</argument>
      <argument type="collection"/>
      <argument>Remove a secret from the vault</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.secrets_remove"/>
    </service>
    <service id=".console.command.secrets_generate_key.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>secrets:generate-keys</argument>
      <argument type="collection"/>
      <argument>Generate new encryption keys</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.secrets_generate_key"/>
    </service>
    <service id=".console.command.secrets_list.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>secrets:list</argument>
      <argument type="collection"/>
      <argument>List all secrets</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.secrets_list"/>
    </service>
    <service id=".console.command.secrets_decrypt_to_local.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>secrets:decrypt-to-local</argument>
      <argument type="collection"/>
      <argument>Decrypt all secrets and stores them in the local vault</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.secrets_decrypt_to_local"/>
    </service>
    <service id=".console.command.secrets_encrypt_from_local.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>secrets:encrypt-from-local</argument>
      <argument type="collection"/>
      <argument>Encrypt all local secrets to the vault</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.secrets_encrypt_from_local"/>
    </service>
    <service id=".maker.auto_command.make_auth.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:auth</argument>
      <argument type="collection"/>
      <argument>Create a Guard authenticator of different flavors</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_auth"/>
    </service>
    <service id=".maker.auto_command.make_command.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:command</argument>
      <argument type="collection"/>
      <argument>Create a new console command class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_command"/>
    </service>
    <service id=".maker.auto_command.make_twig_component.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:twig-component</argument>
      <argument type="collection"/>
      <argument>Create a twig (or live) component</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_twig_component"/>
    </service>
    <service id=".maker.auto_command.make_controller.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:controller</argument>
      <argument type="collection"/>
      <argument>Create a new controller class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_controller"/>
    </service>
    <service id=".maker.auto_command.make_crud.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:crud</argument>
      <argument type="collection"/>
      <argument>Create CRUD for Doctrine entity class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_crud"/>
    </service>
    <service id=".maker.auto_command.make_docker_database.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:docker:database</argument>
      <argument type="collection"/>
      <argument>Add a database container to your compose.yaml file</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_docker_database"/>
    </service>
    <service id=".maker.auto_command.make_entity.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:entity</argument>
      <argument type="collection"/>
      <argument>Create or update a Doctrine entity class, and optionally an API Platform resource</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_entity"/>
    </service>
    <service id=".maker.auto_command.make_fixtures.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:fixtures</argument>
      <argument type="collection"/>
      <argument>Create a new class to load Doctrine fixtures</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_fixtures"/>
    </service>
    <service id=".maker.auto_command.make_form.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:form</argument>
      <argument type="collection"/>
      <argument>Create a new form class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_form"/>
    </service>
    <service id=".maker.auto_command.make_listener.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:listener</argument>
      <argument type="collection">
        <argument>make:subscriber</argument>
      </argument>
      <argument>Creates a new event subscriber class or a new event listener class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_listener"/>
    </service>
    <service id=".maker.auto_command.make_message.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:message</argument>
      <argument type="collection"/>
      <argument>Create a new message and handler</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_message"/>
    </service>
    <service id=".maker.auto_command.make_messenger_middleware.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:messenger-middleware</argument>
      <argument type="collection"/>
      <argument>Create a new messenger middleware</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_messenger_middleware"/>
    </service>
    <service id=".maker.auto_command.make_registration_form.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:registration-form</argument>
      <argument type="collection"/>
      <argument>Create a new registration form system</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_registration_form"/>
    </service>
    <service id=".maker.auto_command.make_reset_password.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:reset-password</argument>
      <argument type="collection"/>
      <argument>Create controller, entity, and repositories for use with symfonycasts/reset-password-bundle</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_reset_password"/>
    </service>
    <service id=".maker.auto_command.make_serializer_encoder.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:serializer:encoder</argument>
      <argument type="collection"/>
      <argument>Create a new serializer encoder class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_serializer_encoder"/>
    </service>
    <service id=".maker.auto_command.make_serializer_normalizer.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:serializer:normalizer</argument>
      <argument type="collection"/>
      <argument>Create a new serializer normalizer class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_serializer_normalizer"/>
    </service>
    <service id=".maker.auto_command.make_twig_extension.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:twig-extension</argument>
      <argument type="collection"/>
      <argument>Create a new Twig extension with its runtime class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_twig_extension"/>
    </service>
    <service id=".maker.auto_command.make_test.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:test</argument>
      <argument type="collection">
        <argument>make:unit-test</argument>
        <argument>make:functional-test</argument>
      </argument>
      <argument>Create a new test class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_test"/>
    </service>
    <service id=".maker.auto_command.make_validator.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:validator</argument>
      <argument type="collection"/>
      <argument>Create a new validator and constraint class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_validator"/>
    </service>
    <service id=".maker.auto_command.make_voter.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:voter</argument>
      <argument type="collection"/>
      <argument>Create a new security voter class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_voter"/>
    </service>
    <service id=".maker.auto_command.make_user.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:user</argument>
      <argument type="collection"/>
      <argument>Create a new security user class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_user"/>
    </service>
    <service id=".maker.auto_command.make_migration.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:migration</argument>
      <argument type="collection"/>
      <argument>Create a new migration based on database changes</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_migration"/>
    </service>
    <service id=".maker.auto_command.make_stimulus_controller.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:stimulus-controller</argument>
      <argument type="collection"/>
      <argument>Create a new Stimulus controller</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_stimulus_controller"/>
    </service>
    <service id=".maker.auto_command.make_security_form_login.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:security:form-login</argument>
      <argument type="collection"/>
      <argument>Generate the code needed for the form_login authenticator</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_security_form_login"/>
    </service>
    <service id="console.command_loader" class="Symfony\Component\Console\CommandLoader\ContainerCommandLoader" public="true">
      <tag name="container.no_preload"/>
      <argument type="service" id=".service_locator.J6jomKo"/>
      <argument type="collection">
        <argument key="about">console.command.about</argument>
        <argument key="assets:install">console.command.assets_install</argument>
        <argument key="cache:clear">console.command.cache_clear</argument>
        <argument key="cache:pool:clear">console.command.cache_pool_clear</argument>
        <argument key="cache:pool:prune">console.command.cache_pool_prune</argument>
        <argument key="cache:pool:invalidate-tags">console.command.cache_pool_invalidate_tags</argument>
        <argument key="cache:pool:delete">console.command.cache_pool_delete</argument>
        <argument key="cache:pool:list">console.command.cache_pool_list</argument>
        <argument key="cache:warmup">console.command.cache_warmup</argument>
        <argument key="debug:config">console.command.config_debug</argument>
        <argument key="config:dump-reference">console.command.config_dump_reference</argument>
        <argument key="debug:container">console.command.container_debug</argument>
        <argument key="lint:container">console.command.container_lint</argument>
        <argument key="debug:autowiring">console.command.debug_autowiring</argument>
        <argument key="debug:dotenv">console.command.dotenv_debug</argument>
        <argument key="debug:event-dispatcher">console.command.event_dispatcher_debug</argument>
        <argument key="debug:router">console.command.router_debug</argument>
        <argument key="router:match">console.command.router_match</argument>
        <argument key="lint:yaml">console.command.yaml_lint</argument>
        <argument key="debug:form">console.command.form_debug</argument>
        <argument key="secrets:set">console.command.secrets_set</argument>
        <argument key="secrets:remove">console.command.secrets_remove</argument>
        <argument key="secrets:generate-keys">console.command.secrets_generate_key</argument>
        <argument key="secrets:list">console.command.secrets_list</argument>
        <argument key="secrets:decrypt-to-local">console.command.secrets_decrypt_to_local</argument>
        <argument key="secrets:encrypt-from-local">console.command.secrets_encrypt_from_local</argument>
        <argument key="make:auth">maker.auto_command.make_auth</argument>
        <argument key="make:command">maker.auto_command.make_command</argument>
        <argument key="make:twig-component">maker.auto_command.make_twig_component</argument>
        <argument key="make:controller">maker.auto_command.make_controller</argument>
        <argument key="make:crud">maker.auto_command.make_crud</argument>
        <argument key="make:docker:database">maker.auto_command.make_docker_database</argument>
        <argument key="make:entity">maker.auto_command.make_entity</argument>
        <argument key="make:fixtures">maker.auto_command.make_fixtures</argument>
        <argument key="make:form">maker.auto_command.make_form</argument>
        <argument key="make:listener">maker.auto_command.make_listener</argument>
        <argument key="make:subscriber">maker.auto_command.make_listener</argument>
        <argument key="make:message">maker.auto_command.make_message</argument>
        <argument key="make:messenger-middleware">maker.auto_command.make_messenger_middleware</argument>
        <argument key="make:registration-form">maker.auto_command.make_registration_form</argument>
        <argument key="make:reset-password">maker.auto_command.make_reset_password</argument>
        <argument key="make:serializer:encoder">maker.auto_command.make_serializer_encoder</argument>
        <argument key="make:serializer:normalizer">maker.auto_command.make_serializer_normalizer</argument>
        <argument key="make:twig-extension">maker.auto_command.make_twig_extension</argument>
        <argument key="make:test">maker.auto_command.make_test</argument>
        <argument key="make:unit-test">maker.auto_command.make_test</argument>
        <argument key="make:functional-test">maker.auto_command.make_test</argument>
        <argument key="make:validator">maker.auto_command.make_validator</argument>
        <argument key="make:voter">maker.auto_command.make_voter</argument>
        <argument key="make:user">maker.auto_command.make_user</argument>
        <argument key="make:migration">maker.auto_command.make_migration</argument>
        <argument key="make:stimulus-controller">maker.auto_command.make_stimulus_controller</argument>
        <argument key="make:security:form-login">maker.auto_command.make_security_form_login</argument>
      </argument>
    </service>
    <service id=".service_locator.J6jomKo" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="console.command.about" type="service_closure" id=".console.command.about.lazy"/>
        <argument key="console.command.assets_install" type="service_closure" id=".console.command.assets_install.lazy"/>
        <argument key="console.command.cache_clear" type="service_closure" id=".console.command.cache_clear.lazy"/>
        <argument key="console.command.cache_pool_clear" type="service_closure" id=".console.command.cache_pool_clear.lazy"/>
        <argument key="console.command.cache_pool_prune" type="service_closure" id=".console.command.cache_pool_prune.lazy"/>
        <argument key="console.command.cache_pool_invalidate_tags" type="service_closure" id=".console.command.cache_pool_invalidate_tags.lazy"/>
        <argument key="console.command.cache_pool_delete" type="service_closure" id=".console.command.cache_pool_delete.lazy"/>
        <argument key="console.command.cache_pool_list" type="service_closure" id=".console.command.cache_pool_list.lazy"/>
        <argument key="console.command.cache_warmup" type="service_closure" id=".console.command.cache_warmup.lazy"/>
        <argument key="console.command.config_debug" type="service_closure" id=".console.command.config_debug.lazy"/>
        <argument key="console.command.config_dump_reference" type="service_closure" id=".console.command.config_dump_reference.lazy"/>
        <argument key="console.command.container_debug" type="service_closure" id=".console.command.container_debug.lazy"/>
        <argument key="console.command.container_lint" type="service_closure" id=".console.command.container_lint.lazy"/>
        <argument key="console.command.debug_autowiring" type="service_closure" id=".console.command.debug_autowiring.lazy"/>
        <argument key="console.command.dotenv_debug" type="service_closure" id=".console.command.dotenv_debug.lazy"/>
        <argument key="console.command.event_dispatcher_debug" type="service_closure" id=".console.command.event_dispatcher_debug.lazy"/>
        <argument key="console.command.router_debug" type="service_closure" id=".console.command.router_debug.lazy"/>
        <argument key="console.command.router_match" type="service_closure" id=".console.command.router_match.lazy"/>
        <argument key="console.command.yaml_lint" type="service_closure" id=".console.command.yaml_lint.lazy"/>
        <argument key="console.command.form_debug" type="service_closure" id=".console.command.form_debug.lazy"/>
        <argument key="console.command.secrets_set" type="service_closure" id=".console.command.secrets_set.lazy"/>
        <argument key="console.command.secrets_remove" type="service_closure" id=".console.command.secrets_remove.lazy"/>
        <argument key="console.command.secrets_generate_key" type="service_closure" id=".console.command.secrets_generate_key.lazy"/>
        <argument key="console.command.secrets_list" type="service_closure" id=".console.command.secrets_list.lazy"/>
        <argument key="console.command.secrets_decrypt_to_local" type="service_closure" id=".console.command.secrets_decrypt_to_local.lazy"/>
        <argument key="console.command.secrets_encrypt_from_local" type="service_closure" id=".console.command.secrets_encrypt_from_local.lazy"/>
        <argument key="maker.auto_command.make_auth" type="service_closure" id=".maker.auto_command.make_auth.lazy"/>
        <argument key="maker.auto_command.make_command" type="service_closure" id=".maker.auto_command.make_command.lazy"/>
        <argument key="maker.auto_command.make_twig_component" type="service_closure" id=".maker.auto_command.make_twig_component.lazy"/>
        <argument key="maker.auto_command.make_controller" type="service_closure" id=".maker.auto_command.make_controller.lazy"/>
        <argument key="maker.auto_command.make_crud" type="service_closure" id=".maker.auto_command.make_crud.lazy"/>
        <argument key="maker.auto_command.make_docker_database" type="service_closure" id=".maker.auto_command.make_docker_database.lazy"/>
        <argument key="maker.auto_command.make_entity" type="service_closure" id=".maker.auto_command.make_entity.lazy"/>
        <argument key="maker.auto_command.make_fixtures" type="service_closure" id=".maker.auto_command.make_fixtures.lazy"/>
        <argument key="maker.auto_command.make_form" type="service_closure" id=".maker.auto_command.make_form.lazy"/>
        <argument key="maker.auto_command.make_listener" type="service_closure" id=".maker.auto_command.make_listener.lazy"/>
        <argument key="maker.auto_command.make_message" type="service_closure" id=".maker.auto_command.make_message.lazy"/>
        <argument key="maker.auto_command.make_messenger_middleware" type="service_closure" id=".maker.auto_command.make_messenger_middleware.lazy"/>
        <argument key="maker.auto_command.make_registration_form" type="service_closure" id=".maker.auto_command.make_registration_form.lazy"/>
        <argument key="maker.auto_command.make_reset_password" type="service_closure" id=".maker.auto_command.make_reset_password.lazy"/>
        <argument key="maker.auto_command.make_serializer_encoder" type="service_closure" id=".maker.auto_command.make_serializer_encoder.lazy"/>
        <argument key="maker.auto_command.make_serializer_normalizer" type="service_closure" id=".maker.auto_command.make_serializer_normalizer.lazy"/>
        <argument key="maker.auto_command.make_twig_extension" type="service_closure" id=".maker.auto_command.make_twig_extension.lazy"/>
        <argument key="maker.auto_command.make_test" type="service_closure" id=".maker.auto_command.make_test.lazy"/>
        <argument key="maker.auto_command.make_validator" type="service_closure" id=".maker.auto_command.make_validator.lazy"/>
        <argument key="maker.auto_command.make_voter" type="service_closure" id=".maker.auto_command.make_voter.lazy"/>
        <argument key="maker.auto_command.make_user" type="service_closure" id=".maker.auto_command.make_user.lazy"/>
        <argument key="maker.auto_command.make_migration" type="service_closure" id=".maker.auto_command.make_migration.lazy"/>
        <argument key="maker.auto_command.make_stimulus_controller" type="service_closure" id=".maker.auto_command.make_stimulus_controller.lazy"/>
        <argument key="maker.auto_command.make_security_form_login" type="service_closure" id=".maker.auto_command.make_security_form_login.lazy"/>
      </argument>
    </service>
    <service id="App\Kernel" alias="kernel" public="true"/>
    <service id="Symfony\Component\DependencyInjection\ParameterBag\ContainerBagInterface" alias="parameter_bag"/>
    <service id="Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface" alias="parameter_bag"/>
    <service id="Symfony\Component\EventDispatcher\EventDispatcherInterface" alias="event_dispatcher"/>
    <service id="Symfony\Contracts\EventDispatcher\EventDispatcherInterface" alias="event_dispatcher"/>
    <service id="Psr\EventDispatcher\EventDispatcherInterface" alias="event_dispatcher"/>
    <service id="Symfony\Component\HttpKernel\HttpKernelInterface" alias="http_kernel"/>
    <service id="Symfony\Component\HttpFoundation\RequestStack" alias="request_stack"/>
    <service id="Symfony\Component\HttpKernel\HttpCache\StoreInterface" alias="http_cache.store"/>
    <service id="Symfony\Component\HttpFoundation\UrlHelper" alias="url_helper"/>
    <service id="Symfony\Component\HttpKernel\KernelInterface" alias="kernel"/>
    <service id="Symfony\Component\Filesystem\Filesystem" alias="filesystem"/>
    <service id="Symfony\Component\HttpKernel\Config\FileLocator" alias="file_locator"/>
    <service id="Symfony\Component\HttpFoundation\UriSigner" alias="uri_signer"/>
    <service id="Symfony\Component\HttpKernel\UriSigner" alias="uri_signer">
      <deprecated package="symfony/framework-bundle" version="6.4">The "%alias_id%" alias is deprecated, use "Symfony\Component\HttpFoundation\UriSigner" instead.</deprecated>
    </service>
    <service id="Symfony\Component\DependencyInjection\ReverseContainer" alias="reverse_container"/>
    <service id="Symfony\Component\String\Slugger\SluggerInterface" alias="slugger"/>
    <service id="Symfony\Component\HttpKernel\Fragment\FragmentUriGeneratorInterface" alias="fragment.uri_generator"/>
    <service id="error_renderer.html" alias="error_handler.error_renderer.html"/>
    <service id="error_renderer" alias="error_handler.error_renderer.html"/>
    <service id=".Psr\Container\ContainerInterface $parameter_bag" alias="parameter_bag"/>
    <service id="Psr\Container\ContainerInterface $parameterBag" alias="parameter_bag"/>
    <service id="cache.app_clearer" alias="cache.default_clearer" public="true"/>
    <service id="Psr\Cache\CacheItemPoolInterface" alias="cache.app"/>
    <service id="Symfony\Contracts\Cache\CacheInterface" alias="cache.app"/>
    <service id="Symfony\Contracts\Cache\TagAwareCacheInterface" alias="cache.app.taggable"/>
    <service id="Symfony\Component\ErrorHandler\ErrorRenderer\FileLinkFormatter" alias="debug.file_link_formatter"/>
    <service id="routing.loader.annotation" alias="routing.loader.attribute">
      <deprecated package="symfony/routing" version="6.4">The "%alias_id%" service is deprecated, use the "routing.loader.attribute" service instead.</deprecated>
    </service>
    <service id="routing.loader.annotation.directory" alias="routing.loader.attribute.directory">
      <deprecated package="symfony/routing" version="6.4">The "%alias_id%" service is deprecated, use the "routing.loader.attribute.directory" service instead.</deprecated>
    </service>
    <service id="routing.loader.annotation.file" alias="routing.loader.attribute.file">
      <deprecated package="symfony/routing" version="6.4">The "%alias_id%" service is deprecated, use the "routing.loader.attribute.file" service instead.</deprecated>
    </service>
    <service id="router" alias="router.default" public="true"/>
    <service id="Symfony\Component\Routing\RouterInterface" alias="router.default"/>
    <service id="Symfony\Component\Routing\Generator\UrlGeneratorInterface" alias="router.default"/>
    <service id="Symfony\Component\Routing\Matcher\UrlMatcherInterface" alias="router.default"/>
    <service id="Symfony\Component\Routing\RequestContextAwareInterface" alias="router.default"/>
    <service id="Symfony\Component\Routing\RequestContext" alias="router.request_context"/>
    <service id="Symfony\Component\PropertyAccess\PropertyAccessorInterface" alias="property_accessor"/>
    <service id="Symfony\Component\PropertyInfo\PropertyAccessExtractorInterface" alias="property_info"/>
    <service id="Symfony\Component\PropertyInfo\PropertyDescriptionExtractorInterface" alias="property_info"/>
    <service id="Symfony\Component\PropertyInfo\PropertyInfoExtractorInterface" alias="property_info"/>
    <service id="Symfony\Component\PropertyInfo\PropertyTypeExtractorInterface" alias="property_info"/>
    <service id="Symfony\Component\PropertyInfo\PropertyListExtractorInterface" alias="property_info"/>
    <service id="Symfony\Component\PropertyInfo\PropertyInitializableExtractorInterface" alias="property_info"/>
    <service id="Symfony\Component\PropertyInfo\PropertyReadInfoExtractorInterface" alias="property_info.reflection_extractor"/>
    <service id="Symfony\Component\PropertyInfo\PropertyWriteInfoExtractorInterface" alias="property_info.reflection_extractor"/>
    <service id="cache.default_redis_provider" alias=".cache_connection.GD_MSZC"/>
    <service id="cache.default_memcached_provider" alias=".cache_connection.JKE6keX"/>
    <service id="cache.default_doctrine_dbal_provider" alias="database_connection"/>
    <service id="SessionHandlerInterface" alias="session.handler.native"/>
    <service id="session.storage.factory" alias="session.storage.factory.native"/>
    <service id="session.handler" alias="session.handler.native"/>
    <service id="Symfony\Component\Form\ResolvedFormTypeFactoryInterface" alias="form.resolved_type_factory"/>
    <service id="Symfony\Component\Form\FormRegistryInterface" alias="form.registry"/>
    <service id="Symfony\Component\Form\FormFactoryInterface" alias="form.factory"/>
    <service id="form.property_accessor" alias="property_accessor"/>
    <service id="form.choice_list_factory" alias="form.choice_list_factory.cached"/>
    <service id="Aws\AccessAnalyzer\AccessAnalyzerClient" alias="aws.accessanalyzer"/>
    <service id="Aws\Account\AccountClient" alias="aws.account"/>
    <service id="Aws\ACMPCA\ACMPCAClient" alias="aws.acmpca"/>
    <service id="Aws\Acm\AcmClient" alias="aws.acm"/>
    <service id="Aws\AlexaForBusiness\AlexaForBusinessClient" alias="aws.alexaforbusiness"/>
    <service id="Aws\PrometheusService\PrometheusServiceClient" alias="aws.prometheusservice"/>
    <service id="Aws\Amplify\AmplifyClient" alias="aws.amplify"/>
    <service id="Aws\AmplifyBackend\AmplifyBackendClient" alias="aws.amplifybackend"/>
    <service id="Aws\AmplifyUIBuilder\AmplifyUIBuilderClient" alias="aws.amplifyuibuilder"/>
    <service id="Aws\ApiGateway\ApiGatewayClient" alias="aws.apigateway"/>
    <service id="Aws\ApiGatewayManagementApi\ApiGatewayManagementApiClient" alias="aws.apigatewaymanagementapi"/>
    <service id="Aws\ApiGatewayV2\ApiGatewayV2Client" alias="aws.apigatewayv2"/>
    <service id="Aws\AppConfig\AppConfigClient" alias="aws.appconfig"/>
    <service id="Aws\AppConfigData\AppConfigDataClient" alias="aws.appconfigdata"/>
    <service id="Aws\AppFabric\AppFabricClient" alias="aws.appfabric"/>
    <service id="Aws\Appflow\AppflowClient" alias="aws.appflow"/>
    <service id="Aws\AppIntegrationsService\AppIntegrationsServiceClient" alias="aws.appintegrationsservice"/>
    <service id="Aws\ApplicationAutoScaling\ApplicationAutoScalingClient" alias="aws.applicationautoscaling"/>
    <service id="Aws\ApplicationInsights\ApplicationInsightsClient" alias="aws.applicationinsights"/>
    <service id="Aws\ApplicationCostProfiler\ApplicationCostProfilerClient" alias="aws.applicationcostprofiler"/>
    <service id="Aws\AppMesh\AppMeshClient" alias="aws.appmesh"/>
    <service id="Aws\AppRunner\AppRunnerClient" alias="aws.apprunner"/>
    <service id="Aws\Appstream\AppstreamClient" alias="aws.appstream"/>
    <service id="Aws\AppSync\AppSyncClient" alias="aws.appsync"/>
    <service id="Aws\ARCZonalShift\ARCZonalShiftClient" alias="aws.arczonalshift"/>
    <service id="Aws\Artifact\ArtifactClient" alias="aws.artifact"/>
    <service id="Aws\Athena\AthenaClient" alias="aws.athena"/>
    <service id="Aws\AuditManager\AuditManagerClient" alias="aws.auditmanager"/>
    <service id="Aws\AutoScalingPlans\AutoScalingPlansClient" alias="aws.autoscalingplans"/>
    <service id="Aws\AutoScaling\AutoScalingClient" alias="aws.autoscaling"/>
    <service id="Aws\B2bi\B2biClient" alias="aws.b2bi"/>
    <service id="Aws\BackupGateway\BackupGatewayClient" alias="aws.backupgateway"/>
    <service id="Aws\Backup\BackupClient" alias="aws.backup"/>
    <service id="Aws\BackupStorage\BackupStorageClient" alias="aws.backupstorage"/>
    <service id="Aws\Batch\BatchClient" alias="aws.batch"/>
    <service id="Aws\BCMDataExports\BCMDataExportsClient" alias="aws.bcmdataexports"/>
    <service id="Aws\BedrockAgentRuntime\BedrockAgentRuntimeClient" alias="aws.bedrockagentruntime"/>
    <service id="Aws\BedrockAgent\BedrockAgentClient" alias="aws.bedrockagent"/>
    <service id="Aws\BedrockRuntime\BedrockRuntimeClient" alias="aws.bedrockruntime"/>
    <service id="Aws\Bedrock\BedrockClient" alias="aws.bedrock"/>
    <service id="Aws\BillingConductor\BillingConductorClient" alias="aws.billingconductor"/>
    <service id="Aws\Braket\BraketClient" alias="aws.braket"/>
    <service id="Aws\Budgets\BudgetsClient" alias="aws.budgets"/>
    <service id="Aws\CostExplorer\CostExplorerClient" alias="aws.costexplorer"/>
    <service id="Aws\Chatbot\ChatbotClient" alias="aws.chatbot"/>
    <service id="Aws\ChimeSDKIdentity\ChimeSDKIdentityClient" alias="aws.chimesdkidentity"/>
    <service id="Aws\ChimeSDKMediaPipelines\ChimeSDKMediaPipelinesClient" alias="aws.chimesdkmediapipelines"/>
    <service id="Aws\ChimeSDKMeetings\ChimeSDKMeetingsClient" alias="aws.chimesdkmeetings"/>
    <service id="Aws\ChimeSDKMessaging\ChimeSDKMessagingClient" alias="aws.chimesdkmessaging"/>
    <service id="Aws\ChimeSDKVoice\ChimeSDKVoiceClient" alias="aws.chimesdkvoice"/>
    <service id="Aws\Chime\ChimeClient" alias="aws.chime"/>
    <service id="Aws\CleanRooms\CleanRoomsClient" alias="aws.cleanrooms"/>
    <service id="Aws\CleanRoomsML\CleanRoomsMLClient" alias="aws.cleanroomsml"/>
    <service id="Aws\Cloud9\Cloud9Client" alias="aws.cloud9"/>
    <service id="Aws\CloudControlApi\CloudControlApiClient" alias="aws.cloudcontrolapi"/>
    <service id="Aws\CloudDirectory\CloudDirectoryClient" alias="aws.clouddirectory"/>
    <service id="Aws\CloudFormation\CloudFormationClient" alias="aws.cloudformation"/>
    <service id="Aws\CloudFrontKeyValueStore\CloudFrontKeyValueStoreClient" alias="aws.cloudfrontkeyvaluestore"/>
    <service id="Aws\CloudFront\CloudFrontClient" alias="aws.cloudfront"/>
    <service id="Aws\CloudHsm\CloudHsmClient" alias="aws.cloudhsm"/>
    <service id="Aws\CloudHSMV2\CloudHSMV2Client" alias="aws.cloudhsmv2"/>
    <service id="Aws\CloudSearch\CloudSearchClient" alias="aws.cloudsearch"/>
    <service id="Aws\CloudSearchDomain\CloudSearchDomainClient" alias="aws.cloudsearchdomain"/>
    <service id="Aws\CloudTrailData\CloudTrailDataClient" alias="aws.cloudtraildata"/>
    <service id="Aws\CloudTrail\CloudTrailClient" alias="aws.cloudtrail"/>
    <service id="Aws\CodeArtifact\CodeArtifactClient" alias="aws.codeartifact"/>
    <service id="Aws\CodeBuild\CodeBuildClient" alias="aws.codebuild"/>
    <service id="Aws\CodeCatalyst\CodeCatalystClient" alias="aws.codecatalyst"/>
    <service id="Aws\CodeCommit\CodeCommitClient" alias="aws.codecommit"/>
    <service id="Aws\CodeDeploy\CodeDeployClient" alias="aws.codedeploy"/>
    <service id="Aws\CodeGuruReviewer\CodeGuruReviewerClient" alias="aws.codegurureviewer"/>
    <service id="Aws\CodeGuruSecurity\CodeGuruSecurityClient" alias="aws.codegurusecurity"/>
    <service id="Aws\CodeGuruProfiler\CodeGuruProfilerClient" alias="aws.codeguruprofiler"/>
    <service id="Aws\CodePipeline\CodePipelineClient" alias="aws.codepipeline"/>
    <service id="Aws\CodeStarconnections\CodeStarconnectionsClient" alias="aws.codestarconnections"/>
    <service id="Aws\CodeStarNotifications\CodeStarNotificationsClient" alias="aws.codestarnotifications"/>
    <service id="Aws\CodeStar\CodeStarClient" alias="aws.codestar"/>
    <service id="Aws\CognitoIdentity\CognitoIdentityClient" alias="aws.cognitoidentity"/>
    <service id="Aws\CognitoIdentityProvider\CognitoIdentityProviderClient" alias="aws.cognitoidentityprovider"/>
    <service id="Aws\CognitoSync\CognitoSyncClient" alias="aws.cognitosync"/>
    <service id="Aws\Comprehend\ComprehendClient" alias="aws.comprehend"/>
    <service id="Aws\ComprehendMedical\ComprehendMedicalClient" alias="aws.comprehendmedical"/>
    <service id="Aws\ComputeOptimizer\ComputeOptimizerClient" alias="aws.computeoptimizer"/>
    <service id="Aws\ConfigService\ConfigServiceClient" alias="aws.configservice"/>
    <service id="Aws\ConnectContactLens\ConnectContactLensClient" alias="aws.connectcontactlens"/>
    <service id="Aws\Connect\ConnectClient" alias="aws.connect"/>
    <service id="Aws\ConnectCampaignService\ConnectCampaignServiceClient" alias="aws.connectcampaignservice"/>
    <service id="Aws\ConnectCases\ConnectCasesClient" alias="aws.connectcases"/>
    <service id="Aws\ConnectParticipant\ConnectParticipantClient" alias="aws.connectparticipant"/>
    <service id="Aws\ControlTower\ControlTowerClient" alias="aws.controltower"/>
    <service id="Aws\CostOptimizationHub\CostOptimizationHubClient" alias="aws.costoptimizationhub"/>
    <service id="Aws\CostandUsageReportService\CostandUsageReportServiceClient" alias="aws.costandusagereportservice"/>
    <service id="Aws\CustomerProfiles\CustomerProfilesClient" alias="aws.customerprofiles"/>
    <service id="Aws\IotDataPlane\IotDataPlaneClient" alias="aws.iotdataplane"/>
    <service id="Aws\GlueDataBrew\GlueDataBrewClient" alias="aws.gluedatabrew"/>
    <service id="Aws\DataExchange\DataExchangeClient" alias="aws.dataexchange"/>
    <service id="Aws\DataPipeline\DataPipelineClient" alias="aws.datapipeline"/>
    <service id="Aws\DataSync\DataSyncClient" alias="aws.datasync"/>
    <service id="Aws\DataZone\DataZoneClient" alias="aws.datazone"/>
    <service id="Aws\DAX\DAXClient" alias="aws.dax"/>
    <service id="Aws\Detective\DetectiveClient" alias="aws.detective"/>
    <service id="Aws\DeviceFarm\DeviceFarmClient" alias="aws.devicefarm"/>
    <service id="Aws\DevOpsGuru\DevOpsGuruClient" alias="aws.devopsguru"/>
    <service id="Aws\DirectConnect\DirectConnectClient" alias="aws.directconnect"/>
    <service id="Aws\ApplicationDiscoveryService\ApplicationDiscoveryServiceClient" alias="aws.applicationdiscoveryservice"/>
    <service id="Aws\DLM\DLMClient" alias="aws.dlm"/>
    <service id="Aws\DatabaseMigrationService\DatabaseMigrationServiceClient" alias="aws.databasemigrationservice"/>
    <service id="Aws\DocDBElastic\DocDBElasticClient" alias="aws.docdbelastic"/>
    <service id="Aws\DocDB\DocDBClient" alias="aws.docdb"/>
    <service id="Aws\drs\drsClient" alias="aws.drs"/>
    <service id="Aws\DirectoryService\DirectoryServiceClient" alias="aws.directoryservice"/>
    <service id="Aws\DynamoDb\DynamoDbClient" alias="aws.dynamodb"/>
    <service id="Aws\EBS\EBSClient" alias="aws.ebs"/>
    <service id="Aws\EC2InstanceConnect\EC2InstanceConnectClient" alias="aws.ec2instanceconnect"/>
    <service id="Aws\Ec2\Ec2Client" alias="aws.ec2"/>
    <service id="Aws\ECRPublic\ECRPublicClient" alias="aws.ecrpublic"/>
    <service id="Aws\Ecr\EcrClient" alias="aws.ecr"/>
    <service id="Aws\Ecs\EcsClient" alias="aws.ecs"/>
    <service id="Aws\EKSAuth\EKSAuthClient" alias="aws.eksauth"/>
    <service id="Aws\EKS\EKSClient" alias="aws.eks"/>
    <service id="Aws\ElasticInference\ElasticInferenceClient" alias="aws.elasticinference"/>
    <service id="Aws\ElastiCache\ElastiCacheClient" alias="aws.elasticache"/>
    <service id="Aws\ElasticBeanstalk\ElasticBeanstalkClient" alias="aws.elasticbeanstalk"/>
    <service id="Aws\Efs\EfsClient" alias="aws.efs"/>
    <service id="Aws\ElasticLoadBalancing\ElasticLoadBalancingClient" alias="aws.elasticloadbalancing"/>
    <service id="Aws\ElasticLoadBalancingV2\ElasticLoadBalancingV2Client" alias="aws.elasticloadbalancingv2"/>
    <service id="Aws\Emr\EmrClient" alias="aws.emr"/>
    <service id="Aws\ElasticTranscoder\ElasticTranscoderClient" alias="aws.elastictranscoder"/>
    <service id="Aws\Ses\SesClient" alias="aws.ses"/>
    <service id="Aws\EMRContainers\EMRContainersClient" alias="aws.emrcontainers"/>
    <service id="Aws\EMRServerless\EMRServerlessClient" alias="aws.emrserverless"/>
    <service id="Aws\MarketplaceEntitlementService\MarketplaceEntitlementServiceClient" alias="aws.marketplaceentitlementservice"/>
    <service id="Aws\EntityResolution\EntityResolutionClient" alias="aws.entityresolution"/>
    <service id="Aws\ElasticsearchService\ElasticsearchServiceClient" alias="aws.elasticsearchservice"/>
    <service id="Aws\EventBridge\EventBridgeClient" alias="aws.eventbridge"/>
    <service id="Aws\CloudWatchEvents\CloudWatchEventsClient" alias="aws.cloudwatchevents"/>
    <service id="Aws\CloudWatchEvidently\CloudWatchEvidentlyClient" alias="aws.cloudwatchevidently"/>
    <service id="Aws\FinSpaceData\FinSpaceDataClient" alias="aws.finspacedata"/>
    <service id="Aws\finspace\finspaceClient" alias="aws.finspace"/>
    <service id="Aws\Firehose\FirehoseClient" alias="aws.firehose"/>
    <service id="Aws\FIS\FISClient" alias="aws.fis"/>
    <service id="Aws\FMS\FMSClient" alias="aws.fms"/>
    <service id="Aws\ForecastService\ForecastServiceClient" alias="aws.forecastservice"/>
    <service id="Aws\ForecastQueryService\ForecastQueryServiceClient" alias="aws.forecastqueryservice"/>
    <service id="Aws\FraudDetector\FraudDetectorClient" alias="aws.frauddetector"/>
    <service id="Aws\FreeTier\FreeTierClient" alias="aws.freetier"/>
    <service id="Aws\FSx\FSxClient" alias="aws.fsx"/>
    <service id="Aws\GameLift\GameLiftClient" alias="aws.gamelift"/>
    <service id="Aws\Glacier\GlacierClient" alias="aws.glacier"/>
    <service id="Aws\GlobalAccelerator\GlobalAcceleratorClient" alias="aws.globalaccelerator"/>
    <service id="Aws\Glue\GlueClient" alias="aws.glue"/>
    <service id="Aws\ManagedGrafana\ManagedGrafanaClient" alias="aws.managedgrafana"/>
    <service id="Aws\Greengrass\GreengrassClient" alias="aws.greengrass"/>
    <service id="Aws\GreengrassV2\GreengrassV2Client" alias="aws.greengrassv2"/>
    <service id="Aws\GroundStation\GroundStationClient" alias="aws.groundstation"/>
    <service id="Aws\GuardDuty\GuardDutyClient" alias="aws.guardduty"/>
    <service id="Aws\Health\HealthClient" alias="aws.health"/>
    <service id="Aws\HealthLake\HealthLakeClient" alias="aws.healthlake"/>
    <service id="Aws\Honeycode\HoneycodeClient" alias="aws.honeycode"/>
    <service id="Aws\Iam\IamClient" alias="aws.iam"/>
    <service id="Aws\IdentityStore\IdentityStoreClient" alias="aws.identitystore"/>
    <service id="Aws\imagebuilder\imagebuilderClient" alias="aws.imagebuilder"/>
    <service id="Aws\ImportExport\ImportExportClient" alias="aws.importexport"/>
    <service id="Aws\InspectorScan\InspectorScanClient" alias="aws.inspectorscan"/>
    <service id="Aws\Inspector\InspectorClient" alias="aws.inspector"/>
    <service id="Aws\Inspector2\Inspector2Client" alias="aws.inspector2"/>
    <service id="Aws\InternetMonitor\InternetMonitorClient" alias="aws.internetmonitor"/>
    <service id="Aws\IoTJobsDataPlane\IoTJobsDataPlaneClient" alias="aws.iotjobsdataplane"/>
    <service id="Aws\Iot\IotClient" alias="aws.iot"/>
    <service id="Aws\IoT1ClickDevicesService\IoT1ClickDevicesServiceClient" alias="aws.iot1clickdevicesservice"/>
    <service id="Aws\IoT1ClickProjects\IoT1ClickProjectsClient" alias="aws.iot1clickprojects"/>
    <service id="Aws\IoTAnalytics\IoTAnalyticsClient" alias="aws.iotanalytics"/>
    <service id="Aws\IoTDeviceAdvisor\IoTDeviceAdvisorClient" alias="aws.iotdeviceadvisor"/>
    <service id="Aws\IoTEventsData\IoTEventsDataClient" alias="aws.ioteventsdata"/>
    <service id="Aws\IoTEvents\IoTEventsClient" alias="aws.iotevents"/>
    <service id="Aws\IoTFleetHub\IoTFleetHubClient" alias="aws.iotfleethub"/>
    <service id="Aws\IoTFleetWise\IoTFleetWiseClient" alias="aws.iotfleetwise"/>
    <service id="Aws\IoTSecureTunneling\IoTSecureTunnelingClient" alias="aws.iotsecuretunneling"/>
    <service id="Aws\IoTSiteWise\IoTSiteWiseClient" alias="aws.iotsitewise"/>
    <service id="Aws\IoTThingsGraph\IoTThingsGraphClient" alias="aws.iotthingsgraph"/>
    <service id="Aws\IoTTwinMaker\IoTTwinMakerClient" alias="aws.iottwinmaker"/>
    <service id="Aws\IoTWireless\IoTWirelessClient" alias="aws.iotwireless"/>
    <service id="Aws\IVSRealTime\IVSRealTimeClient" alias="aws.ivsrealtime"/>
    <service id="Aws\IVS\IVSClient" alias="aws.ivs"/>
    <service id="Aws\ivschat\ivschatClient" alias="aws.ivschat"/>
    <service id="Aws\Kafka\KafkaClient" alias="aws.kafka"/>
    <service id="Aws\KafkaConnect\KafkaConnectClient" alias="aws.kafkaconnect"/>
    <service id="Aws\KendraRanking\KendraRankingClient" alias="aws.kendraranking"/>
    <service id="Aws\kendra\kendraClient" alias="aws.kendra"/>
    <service id="Aws\Keyspaces\KeyspacesClient" alias="aws.keyspaces"/>
    <service id="Aws\KinesisVideoArchivedMedia\KinesisVideoArchivedMediaClient" alias="aws.kinesisvideoarchivedmedia"/>
    <service id="Aws\KinesisVideoMedia\KinesisVideoMediaClient" alias="aws.kinesisvideomedia"/>
    <service id="Aws\KinesisVideoSignalingChannels\KinesisVideoSignalingChannelsClient" alias="aws.kinesisvideosignalingchannels"/>
    <service id="Aws\KinesisVideoWebRTCStorage\KinesisVideoWebRTCStorageClient" alias="aws.kinesisvideowebrtcstorage"/>
    <service id="Aws\Kinesis\KinesisClient" alias="aws.kinesis"/>
    <service id="Aws\KinesisAnalytics\KinesisAnalyticsClient" alias="aws.kinesisanalytics"/>
    <service id="Aws\KinesisAnalyticsV2\KinesisAnalyticsV2Client" alias="aws.kinesisanalyticsv2"/>
    <service id="Aws\KinesisVideo\KinesisVideoClient" alias="aws.kinesisvideo"/>
    <service id="Aws\Kms\KmsClient" alias="aws.kms"/>
    <service id="Aws\LakeFormation\LakeFormationClient" alias="aws.lakeformation"/>
    <service id="Aws\Lambda\LambdaClient" alias="aws.lambda"/>
    <service id="Aws\LaunchWizard\LaunchWizardClient" alias="aws.launchwizard"/>
    <service id="Aws\LexModelBuildingService\LexModelBuildingServiceClient" alias="aws.lexmodelbuildingservice"/>
    <service id="Aws\LicenseManagerLinuxSubscriptions\LicenseManagerLinuxSubscriptionsClient" alias="aws.licensemanagerlinuxsubscriptions"/>
    <service id="Aws\LicenseManagerUserSubscriptions\LicenseManagerUserSubscriptionsClient" alias="aws.licensemanagerusersubscriptions"/>
    <service id="Aws\LicenseManager\LicenseManagerClient" alias="aws.licensemanager"/>
    <service id="Aws\Lightsail\LightsailClient" alias="aws.lightsail"/>
    <service id="Aws\LocationService\LocationServiceClient" alias="aws.locationservice"/>
    <service id="Aws\CloudWatchLogs\CloudWatchLogsClient" alias="aws.cloudwatchlogs"/>
    <service id="Aws\LookoutEquipment\LookoutEquipmentClient" alias="aws.lookoutequipment"/>
    <service id="Aws\LookoutMetrics\LookoutMetricsClient" alias="aws.lookoutmetrics"/>
    <service id="Aws\LookoutforVision\LookoutforVisionClient" alias="aws.lookoutforvision"/>
    <service id="Aws\MainframeModernization\MainframeModernizationClient" alias="aws.mainframemodernization"/>
    <service id="Aws\MachineLearning\MachineLearningClient" alias="aws.machinelearning"/>
    <service id="Aws\Macie2\Macie2Client" alias="aws.macie2"/>
    <service id="Aws\ManagedBlockchainQuery\ManagedBlockchainQueryClient" alias="aws.managedblockchainquery"/>
    <service id="Aws\ManagedBlockchain\ManagedBlockchainClient" alias="aws.managedblockchain"/>
    <service id="Aws\MarketplaceAgreement\MarketplaceAgreementClient" alias="aws.marketplaceagreement"/>
    <service id="Aws\MarketplaceCatalog\MarketplaceCatalogClient" alias="aws.marketplacecatalog"/>
    <service id="Aws\MarketplaceDeployment\MarketplaceDeploymentClient" alias="aws.marketplacedeployment"/>
    <service id="Aws\MarketplaceCommerceAnalytics\MarketplaceCommerceAnalyticsClient" alias="aws.marketplacecommerceanalytics"/>
    <service id="Aws\MediaConnect\MediaConnectClient" alias="aws.mediaconnect"/>
    <service id="Aws\MediaConvert\MediaConvertClient" alias="aws.mediaconvert"/>
    <service id="Aws\MediaLive\MediaLiveClient" alias="aws.medialive"/>
    <service id="Aws\MediaPackageVod\MediaPackageVodClient" alias="aws.mediapackagevod"/>
    <service id="Aws\MediaPackage\MediaPackageClient" alias="aws.mediapackage"/>
    <service id="Aws\MediaPackageV2\MediaPackageV2Client" alias="aws.mediapackagev2"/>
    <service id="Aws\MediaStoreData\MediaStoreDataClient" alias="aws.mediastoredata"/>
    <service id="Aws\MediaStore\MediaStoreClient" alias="aws.mediastore"/>
    <service id="Aws\MediaTailor\MediaTailorClient" alias="aws.mediatailor"/>
    <service id="Aws\MedicalImaging\MedicalImagingClient" alias="aws.medicalimaging"/>
    <service id="Aws\MemoryDB\MemoryDBClient" alias="aws.memorydb"/>
    <service id="Aws\MarketplaceMetering\MarketplaceMeteringClient" alias="aws.marketplacemetering"/>
    <service id="Aws\MigrationHub\MigrationHubClient" alias="aws.migrationhub"/>
    <service id="Aws\mgn\mgnClient" alias="aws.mgn"/>
    <service id="Aws\MigrationHubRefactorSpaces\MigrationHubRefactorSpacesClient" alias="aws.migrationhubrefactorspaces"/>
    <service id="Aws\MigrationHubConfig\MigrationHubConfigClient" alias="aws.migrationhubconfig"/>
    <service id="Aws\MigrationHubOrchestrator\MigrationHubOrchestratorClient" alias="aws.migrationhuborchestrator"/>
    <service id="Aws\MigrationHubStrategyRecommendations\MigrationHubStrategyRecommendationsClient" alias="aws.migrationhubstrategyrecommendations"/>
    <service id="Aws\Mobile\MobileClient" alias="aws.mobile"/>
    <service id="Aws\LexModelsV2\LexModelsV2Client" alias="aws.lexmodelsv2"/>
    <service id="Aws\CloudWatch\CloudWatchClient" alias="aws.cloudwatch"/>
    <service id="Aws\MQ\MQClient" alias="aws.mq"/>
    <service id="Aws\MTurk\MTurkClient" alias="aws.mturk"/>
    <service id="Aws\MWAA\MWAAClient" alias="aws.mwaa"/>
    <service id="Aws\NeptuneGraph\NeptuneGraphClient" alias="aws.neptunegraph"/>
    <service id="Aws\Neptune\NeptuneClient" alias="aws.neptune"/>
    <service id="Aws\Neptunedata\NeptunedataClient" alias="aws.neptunedata"/>
    <service id="Aws\NetworkFirewall\NetworkFirewallClient" alias="aws.networkfirewall"/>
    <service id="Aws\NetworkManager\NetworkManagerClient" alias="aws.networkmanager"/>
    <service id="Aws\NetworkMonitor\NetworkMonitorClient" alias="aws.networkmonitor"/>
    <service id="Aws\NimbleStudio\NimbleStudioClient" alias="aws.nimblestudio"/>
    <service id="Aws\OAM\OAMClient" alias="aws.oam"/>
    <service id="Aws\Omics\OmicsClient" alias="aws.omics"/>
    <service id="Aws\OpenSearchService\OpenSearchServiceClient" alias="aws.opensearchservice"/>
    <service id="Aws\OpenSearchServerless\OpenSearchServerlessClient" alias="aws.opensearchserverless"/>
    <service id="Aws\OpsWorks\OpsWorksClient" alias="aws.opsworks"/>
    <service id="Aws\OpsWorksCM\OpsWorksCMClient" alias="aws.opsworkscm"/>
    <service id="Aws\Organizations\OrganizationsClient" alias="aws.organizations"/>
    <service id="Aws\OSIS\OSISClient" alias="aws.osis"/>
    <service id="Aws\Outposts\OutpostsClient" alias="aws.outposts"/>
    <service id="Aws\Panorama\PanoramaClient" alias="aws.panorama"/>
    <service id="Aws\PaymentCryptographyData\PaymentCryptographyDataClient" alias="aws.paymentcryptographydata"/>
    <service id="Aws\PaymentCryptography\PaymentCryptographyClient" alias="aws.paymentcryptography"/>
    <service id="Aws\PcaConnectorAd\PcaConnectorAdClient" alias="aws.pcaconnectorad"/>
    <service id="Aws\PersonalizeEvents\PersonalizeEventsClient" alias="aws.personalizeevents"/>
    <service id="Aws\PersonalizeRuntime\PersonalizeRuntimeClient" alias="aws.personalizeruntime"/>
    <service id="Aws\Personalize\PersonalizeClient" alias="aws.personalize"/>
    <service id="Aws\PI\PIClient" alias="aws.pi"/>
    <service id="Aws\PinpointEmail\PinpointEmailClient" alias="aws.pinpointemail"/>
    <service id="Aws\PinpointSMSVoiceV2\PinpointSMSVoiceV2Client" alias="aws.pinpointsmsvoicev2"/>
    <service id="Aws\Pinpoint\PinpointClient" alias="aws.pinpoint"/>
    <service id="Aws\Pipes\PipesClient" alias="aws.pipes"/>
    <service id="Aws\Polly\PollyClient" alias="aws.polly"/>
    <service id="Aws\Pricing\PricingClient" alias="aws.pricing"/>
    <service id="Aws\PrivateNetworks\PrivateNetworksClient" alias="aws.privatenetworks"/>
    <service id="Aws\Proton\ProtonClient" alias="aws.proton"/>
    <service id="Aws\QBusiness\QBusinessClient" alias="aws.qbusiness"/>
    <service id="Aws\QConnect\QConnectClient" alias="aws.qconnect"/>
    <service id="Aws\QLDBSession\QLDBSessionClient" alias="aws.qldbsession"/>
    <service id="Aws\QLDB\QLDBClient" alias="aws.qldb"/>
    <service id="Aws\QuickSight\QuickSightClient" alias="aws.quicksight"/>
    <service id="Aws\RAM\RAMClient" alias="aws.ram"/>
    <service id="Aws\RecycleBin\RecycleBinClient" alias="aws.recyclebin"/>
    <service id="Aws\RDSDataService\RDSDataServiceClient" alias="aws.rdsdataservice"/>
    <service id="Aws\Rds\RdsClient" alias="aws.rds"/>
    <service id="Aws\RedshiftDataAPIService\RedshiftDataAPIServiceClient" alias="aws.redshiftdataapiservice"/>
    <service id="Aws\RedshiftServerless\RedshiftServerlessClient" alias="aws.redshiftserverless"/>
    <service id="Aws\Redshift\RedshiftClient" alias="aws.redshift"/>
    <service id="Aws\Rekognition\RekognitionClient" alias="aws.rekognition"/>
    <service id="Aws\Repostspace\RepostspaceClient" alias="aws.repostspace"/>
    <service id="Aws\ResilienceHub\ResilienceHubClient" alias="aws.resiliencehub"/>
    <service id="Aws\ResourceExplorer2\ResourceExplorer2Client" alias="aws.resourceexplorer2"/>
    <service id="Aws\ResourceGroups\ResourceGroupsClient" alias="aws.resourcegroups"/>
    <service id="Aws\ResourceGroupsTaggingAPI\ResourceGroupsTaggingAPIClient" alias="aws.resourcegroupstaggingapi"/>
    <service id="Aws\RoboMaker\RoboMakerClient" alias="aws.robomaker"/>
    <service id="Aws\RolesAnywhere\RolesAnywhereClient" alias="aws.rolesanywhere"/>
    <service id="Aws\Route53RecoveryCluster\Route53RecoveryClusterClient" alias="aws.route53recoverycluster"/>
    <service id="Aws\Route53RecoveryControlConfig\Route53RecoveryControlConfigClient" alias="aws.route53recoverycontrolconfig"/>
    <service id="Aws\Route53RecoveryReadiness\Route53RecoveryReadinessClient" alias="aws.route53recoveryreadiness"/>
    <service id="Aws\Route53\Route53Client" alias="aws.route53"/>
    <service id="Aws\Route53Domains\Route53DomainsClient" alias="aws.route53domains"/>
    <service id="Aws\Route53Resolver\Route53ResolverClient" alias="aws.route53resolver"/>
    <service id="Aws\CloudWatchRUM\CloudWatchRUMClient" alias="aws.cloudwatchrum"/>
    <service id="Aws\LexRuntimeV2\LexRuntimeV2Client" alias="aws.lexruntimev2"/>
    <service id="Aws\LexRuntimeService\LexRuntimeServiceClient" alias="aws.lexruntimeservice"/>
    <service id="Aws\SageMakerRuntime\SageMakerRuntimeClient" alias="aws.sagemakerruntime"/>
    <service id="Aws\S3\S3Client" alias="aws.s3"/>
    <service id="Aws\S3Control\S3ControlClient" alias="aws.s3control"/>
    <service id="Aws\S3Outposts\S3OutpostsClient" alias="aws.s3outposts"/>
    <service id="Aws\AugmentedAIRuntime\AugmentedAIRuntimeClient" alias="aws.augmentedairuntime"/>
    <service id="Aws\SagemakerEdgeManager\SagemakerEdgeManagerClient" alias="aws.sagemakeredgemanager"/>
    <service id="Aws\SageMakerFeatureStoreRuntime\SageMakerFeatureStoreRuntimeClient" alias="aws.sagemakerfeaturestoreruntime"/>
    <service id="Aws\SageMakerGeospatial\SageMakerGeospatialClient" alias="aws.sagemakergeospatial"/>
    <service id="Aws\SageMakerMetrics\SageMakerMetricsClient" alias="aws.sagemakermetrics"/>
    <service id="Aws\SageMaker\SageMakerClient" alias="aws.sagemaker"/>
    <service id="Aws\SavingsPlans\SavingsPlansClient" alias="aws.savingsplans"/>
    <service id="Aws\Scheduler\SchedulerClient" alias="aws.scheduler"/>
    <service id="Aws\Schemas\SchemasClient" alias="aws.schemas"/>
    <service id="Aws\SecretsManager\SecretsManagerClient" alias="aws.secretsmanager"/>
    <service id="Aws\SecurityHub\SecurityHubClient" alias="aws.securityhub"/>
    <service id="Aws\SecurityLake\SecurityLakeClient" alias="aws.securitylake"/>
    <service id="Aws\ServerlessApplicationRepository\ServerlessApplicationRepositoryClient" alias="aws.serverlessapplicationrepository"/>
    <service id="Aws\ServiceQuotas\ServiceQuotasClient" alias="aws.servicequotas"/>
    <service id="Aws\AppRegistry\AppRegistryClient" alias="aws.appregistry"/>
    <service id="Aws\ServiceCatalog\ServiceCatalogClient" alias="aws.servicecatalog"/>
    <service id="Aws\ServiceDiscovery\ServiceDiscoveryClient" alias="aws.servicediscovery"/>
    <service id="Aws\SesV2\SesV2Client" alias="aws.sesv2"/>
    <service id="Aws\Shield\ShieldClient" alias="aws.shield"/>
    <service id="Aws\signer\signerClient" alias="aws.signer"/>
    <service id="Aws\SimSpaceWeaver\SimSpaceWeaverClient" alias="aws.simspaceweaver"/>
    <service id="Aws\PinpointSMSVoice\PinpointSMSVoiceClient" alias="aws.pinpointsmsvoice"/>
    <service id="Aws\Sms\SmsClient" alias="aws.sms"/>
    <service id="Aws\SnowDeviceManagement\SnowDeviceManagementClient" alias="aws.snowdevicemanagement"/>
    <service id="Aws\SnowBall\SnowBallClient" alias="aws.snowball"/>
    <service id="Aws\Sns\SnsClient" alias="aws.sns"/>
    <service id="Aws\Sqs\SqsClient" alias="aws.sqs"/>
    <service id="Aws\SSMContacts\SSMContactsClient" alias="aws.ssmcontacts"/>
    <service id="Aws\SSMIncidents\SSMIncidentsClient" alias="aws.ssmincidents"/>
    <service id="Aws\SsmSap\SsmSapClient" alias="aws.ssmsap"/>
    <service id="Aws\Ssm\SsmClient" alias="aws.ssm"/>
    <service id="Aws\SSOAdmin\SSOAdminClient" alias="aws.ssoadmin"/>
    <service id="Aws\SSOOIDC\SSOOIDCClient" alias="aws.ssooidc"/>
    <service id="Aws\SSO\SSOClient" alias="aws.sso"/>
    <service id="Aws\Sfn\SfnClient" alias="aws.sfn"/>
    <service id="Aws\StorageGateway\StorageGatewayClient" alias="aws.storagegateway"/>
    <service id="Aws\DynamoDbStreams\DynamoDbStreamsClient" alias="aws.dynamodbstreams"/>
    <service id="Aws\Sts\StsClient" alias="aws.sts"/>
    <service id="Aws\SupplyChain\SupplyChainClient" alias="aws.supplychain"/>
    <service id="Aws\SupportApp\SupportAppClient" alias="aws.supportapp"/>
    <service id="Aws\Support\SupportClient" alias="aws.support"/>
    <service id="Aws\Swf\SwfClient" alias="aws.swf"/>
    <service id="Aws\Synthetics\SyntheticsClient" alias="aws.synthetics"/>
    <service id="Aws\Textract\TextractClient" alias="aws.textract"/>
    <service id="Aws\TimestreamInfluxDB\TimestreamInfluxDBClient" alias="aws.timestreaminfluxdb"/>
    <service id="Aws\TimestreamQuery\TimestreamQueryClient" alias="aws.timestreamquery"/>
    <service id="Aws\TimestreamWrite\TimestreamWriteClient" alias="aws.timestreamwrite"/>
    <service id="Aws\Tnb\TnbClient" alias="aws.tnb"/>
    <service id="Aws\TranscribeService\TranscribeServiceClient" alias="aws.transcribeservice"/>
    <service id="Aws\Transfer\TransferClient" alias="aws.transfer"/>
    <service id="Aws\Translate\TranslateClient" alias="aws.translate"/>
    <service id="Aws\TrustedAdvisor\TrustedAdvisorClient" alias="aws.trustedadvisor"/>
    <service id="Aws\VerifiedPermissions\VerifiedPermissionsClient" alias="aws.verifiedpermissions"/>
    <service id="Aws\VoiceID\VoiceIDClient" alias="aws.voiceid"/>
    <service id="Aws\VPCLattice\VPCLatticeClient" alias="aws.vpclattice"/>
    <service id="Aws\WafRegional\WafRegionalClient" alias="aws.wafregional"/>
    <service id="Aws\Waf\WafClient" alias="aws.waf"/>
    <service id="Aws\WAFV2\WAFV2Client" alias="aws.wafv2"/>
    <service id="Aws\WellArchitected\WellArchitectedClient" alias="aws.wellarchitected"/>
    <service id="Aws\ConnectWisdomService\ConnectWisdomServiceClient" alias="aws.connectwisdomservice"/>
    <service id="Aws\WorkDocs\WorkDocsClient" alias="aws.workdocs"/>
    <service id="Aws\WorkLink\WorkLinkClient" alias="aws.worklink"/>
    <service id="Aws\WorkMail\WorkMailClient" alias="aws.workmail"/>
    <service id="Aws\WorkMailMessageFlow\WorkMailMessageFlowClient" alias="aws.workmailmessageflow"/>
    <service id="Aws\WorkSpacesThinClient\WorkSpacesThinClientClient" alias="aws.workspacesthinclient"/>
    <service id="Aws\WorkSpacesWeb\WorkSpacesWebClient" alias="aws.workspacesweb"/>
    <service id="Aws\WorkSpaces\WorkSpacesClient" alias="aws.workspaces"/>
    <service id="Aws\XRay\XRayClient" alias="aws.xray"/>
    <service id="container.env_var_processors_locator" alias=".service_locator.w7.f4fT" public="true"/>
    <service id="argument_resolver.controller_locator" alias=".service_locator.HBdvAhp"/>
    <service id="Psr\Log\LoggerInterface" alias="logger"/>
    <service id=".service_locator.bJ.4HC5" alias=".service_locator.w7.f4fT"/>
    <service id=".service_locator.L.EDYUC" alias=".service_locator.HBdvAhp"/>
    <service id=".service_locator._FDPRQZ" alias=".service_locator.HJVVhIz"/>
    <service id=".service_locator.jUv.zyj" alias=".service_locator.O2p6Lk7"/>
    <service id=".service_locator.gFlme_s" alias=".service_locator.y4_Zrx."/>
    <service id=".service_locator.2LB61Di" alias=".service_locator.O2p6Lk7"/>
    <service id=".service_locator.F6D.70D" alias=".service_locator.3FMSrrH"/>
    <service id=".service_locator.u6DWx23" alias=".service_locator.cXsfP3P"/>
  </services>
</container>
